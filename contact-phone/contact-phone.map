{"version":3,"sources":["../node_modules/object-assign/index.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","0","../source/InternationalIcon.js","../source/PropTypes.js","../node_modules/classnames/index.js","../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","../node_modules/semver-compare/index.js","../source/metadata.js","../source/IDD.js","../source/parseIncompletePhoneNumber.js","../source/common.js","../source/getCountryCallingCode.js","../source/RFC3966.js","../source/parse.js","../source/getNumberType.js","../source/isPossibleNumber.js","../source/validate.js","../source/format.js","../source/PhoneNumber.js","../source/parsePhoneNumber.js","../source/getExampleNumber.js","../source/isValidNumberForRegion.js","../../source/findNumbers/util.js","../../source/findNumbers/parsePreCandidate.js","../../source/findNumbers/isValidPreCandidate.js","../../source/findNumbers/utf-8.js","../../source/findNumbers/isValidCandidate.js","../source/findPhoneNumbers.js","../../source/findNumbers/Leniency.js","../source/PhoneNumberMatcher.js","../source/findNumbers.js","../source/searchNumbers.js","../source/AsYouType.js","../source/formatIncompletePhoneNumber.js","../node_modules/libphonenumber-js/custom.js","../source/InputBasic.js","../source/Flag.js","../source/input-control.js","../source/countries.js","../source/PhoneInput.js","../source/CountrySelectNative.js","../source/PhoneInputNative.js","../source/PhoneInputNativeDefaultMetadata.js","../source/formatPhoneNumberDefaultMetadata.js","../source/isValidPhoneNumberDefaultMetadata.js","../node_modules/react-phone-number-input/index.js","contact-phone.jsx"],"names":["getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","toObject","val","TypeError","shouldUseNative","assign","test1","String","getOwnPropertyNames","test2","i","fromCharCode","order2","map","n","join","test3","split","forEach","letter","keys","err","module","exports","target","source","from","symbols","to","s","arguments","length","key","call","k","require","Symbol","for","p","q","r","t","u","v","w","x","y","z","A","B","C","iterator","aa","a","b","e","c","d","g","h","f","Error","l","m","replace","name","framesToPop","D","encodeURIComponent","E","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","F","G","props","context","refs","updater","H","I","isReactComponent","setState","forceUpdate","J","constructor","isPureReactComponent","K","current","currentDispatcher","L","M","ref","__self","__source","N","children","Array","defaultProps","$$typeof","type","_owner","ba","O","escape","P","Q","R","pop","result","keyPrefix","func","count","S","push","T","U","isArray","next","done","value","V","toString","ca","da","W","X","Children","toArray","only","createRef","Component","PureComponent","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","forwardRef","render","lazy","_ctor","_status","_result","memo","compare","Fragment","StrictMode","Suspense","createElement","cloneElement","createFactory","bind","isValidElement","version","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","unstable_ConcurrentMode","unstable_Profiler","Y","default","Z","REACT_ELEMENT_TYPE","throwOnDirectAccess","country_calling_codes","1","7","20","27","30","31","32","33","34","36","39","40","41","43","44","45","46","47","48","49","51","52","53","54","55","56","57","58","60","61","62","63","64","65","66","81","82","84","86","90","91","92","93","94","95","98","211","212","213","216","218","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","260","261","262","263","264","265","266","267","268","269","290","291","297","298","299","350","351","352","353","354","355","356","357","358","359","370","371","372","373","374","375","376","377","378","380","381","382","383","385","386","387","389","420","421","423","500","501","502","503","504","505","506","507","508","509","590","591","592","593","594","595","596","597","598","599","670","672","673","674","675","676","677","678","679","680","681","682","683","685","686","687","688","689","690","691","692","800","808","850","852","853","855","856","870","878","880","881","882","883","886","888","960","961","962","963","964","965","966","967","968","970","971","972","973","974","975","976","977","979","992","993","994","995","996","998","countries","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","001","ext","ZZ","InternationalIcon","metadata","shape","object","isRequired","labels","objectOf","string","componentWillMount","state","getDerivedStateFromProps","componentWillReceiveProps","nextProps","prevState","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","polyfill","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","newApiName","componentDidUpdate","maybeSnapshot","snapshot","__suppressDeprecationWarning","validateMetadata","getExtPrefix","V2","V3","DEFAULT_EXT_PREFIX","Metadata","v1","v2","undefined","v3","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","formats","_getFormats","getDefaultCountryMetadataForRegion","Format","_","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","hasTypes","getType","Type","country_phone_code_to_countries","country_calling_code","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","test","possibleLengths","is_object","type_of","getIDDPrefix","stripIDDPrefix","CAPTURING_DIGIT_PATTERN","RegExp","SINGLE_IDD_PREFIX","countryMetadata","IDDPrefix","defaultIDDPrefix","number","IDDPrefixPattern","search","matchedGroups","slice","match","parseIncompletePhoneNumber","parsePhoneNumberCharacter","character","parseDigit","extractCountryCallingCode","matches_entirely","create_extension_pattern","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","LEADING_PLUS_CHARS_PATTERN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","DIGITS","numberWithoutIDD","text","regular_expression","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","purpose","single_extension_characters","parseRFC3966","formatRFC3966","parse","is_viable_phone_number","extract_formatted_phone_number","strip_national_prefix_and_carrier_code","find_country_code","MIN_LENGTH_FOR_NSN","MAX_INPUT_STRING_LENGTH","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERN","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_PATTERN","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","default_options","arg_1","arg_2","arg_3","arg_4","sort_out_arguments","options","defaultCountry","parse_input","formatted_phone_number","parse_phone_number","nationalNumber","national_number","carrierCode","selectedCountry","phoneNumber","valid","nationalNumberPattern","extended","possible","phone","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_phone_number","possible_countries","_find_country_code","leadingDigits","strip_extension","start","number_without_extension","matches","indexOf","with_extension_stripped","default_country","chooseCountryByCountryCallingCode","parse_national_number","carrier_code","exactCountry","potential_national_number","get_number_type","is_of_type","check_number_length_for_type","merge_arrays","non_fixed_line_types","input","pattern","_type","type_info","possible_lengths","mobile_type","actual_length","minimum_length","merged","element","sort","isPossibleNumber","is_possible_number","is_international","isValidNumber","format_national_number_using_format","choose_format_for_number","changeInternationalFormatStyle","formatIDDSameCountryCallingCodeNumber","defaultOptions","formatExtension","extension","arg_5","format_type","add_extension","format_national_number","fromCountry","humanReadable","formattedForSameCountryCallingCode","FIRST_GROUP_PATTERN","useInternationalFormat","includeNationalPrefixForNationalFormat","formattedNumber","internationalFormat","format_as","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","local","trim","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","PhoneNumber","isCountryCode","_metadata","parsePhoneNumber","isObject","getExampleNumber","examples","isValidNumberForRegion","limit","lower","upper","trimAfterFirstMatch","regexp","index","startsWith","substring","endsWith","parsePreCandidate","SECOND_NUMBER_START_PATTERN","candidate","isValidPreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","offset","followingText","isLatinLetter","isInvalidPunctuationSymbol","_pZ","pZ","PZ","_pN","_pNd","pNd","_pL","pL","pL_regexp","_pSc","pSc","pSc_regexp","_pMn","pMn","pMn_regexp","_InBasic_Latin","_InLatin_1_Supplement","_InLatin_Extended_A","_InLatin_Extended_Additional","_InLatin_Extended_B","_InCombining_Diacritical_Marks","latinLetterRegexp","isValidCandidate","OPENING_PARENS","CLOSING_PARENS","NON_PARENS","LEAD_CLASS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","leniency","previousChar","lastCharIndex","nextChar","findPhoneNumbers","searchPhoneNumbers","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","VALID_PRECEDING_CHARACTER_PATTERN","PhoneNumberSearch","phones","hasNext","startsAt","parseCandidate","find","endsAt","last_match","containsMoreThanOneSlashInNationalNumber","containsOnlyValidXChars","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","parseDigits","isNationalPrefixPresentIfRequired","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","checkNumberGroupingIsValid","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","formattingPattern","nationalSignificantNumber","formatNsnUsingPattern","rfc3966Format","formatNumber","endIndex","startIndex","allNumberGroupsAreExactlyPresent","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","allNumberGroupsRemainGrouped","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","digit","POSSIBLE","VALID","STRICT_GROUPING","candidateString","EXACT_GROUPING","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Number","Math","pow","PhoneNumberMatcher","searchIndex","maxTries","parseAndVerify","extractInnerMatch","isFirstMatch","possibleInnerMatch","group","lastMatch","findNumbers","matcher","results","searchNumbers","strip_dangling_braces","cut_stripping_dangling_braces","close_dangling_braces","count_occurences","repeat","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","country_code","reset","extracted_number","process_input","current_output","parsed_input","reset_countriness","determine_the_country","extract_country_calling_code","initialize_phone_number_formats_for_this_country_calling_code","reset_format","previous_national_prefix","national_prefix","extract_national_prefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","format_national_phone_number","full_phone_number","next_digits","national_number_formatted_with_previous_format","chosen_format","format_next_national_number_digits","formatted_number","attempt_to_format_complete_phone_number","choose_another_format","reformat_national_number","reset_country","template","partially_populated_template","last_match_position","filter","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","should_format","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","is_format_applicable","create_formatting_template","full_number","formatted_national_number","nationalPrefixIsMandatoryWhenFormatting","get_template_for_phone_number_format_pattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","get_format_format","strict_pattern","national_number_dummy_digits","digits","dangling_braces","cleared_string","cut_before_index","cut_before","retained_template","symbol","times","formatIncompletePhoneNumber","InputBasic","onChange","event","newValue","onBlur","_event","stopPropagation","preventDefault","focus","storeInput","onFocus","rest","propTypes","FlagComponent","flags","flagsPath","className","toLowerCase","getPreSelectedCountry","getCountrySelectOptions","generateNationalNumberDigits","migrateParsedInputForNewCountry","e164","trimNumber","getCountryForParsedInput","get_country_from_possibly_incomplete_international_phone_number","compare_strings","strip_country_calling_code","get_national_significant_number_part","could_number_belong_to_country","parsed_number","includeInternationalOption","country_names","country_select_options","label","unshift","parsed_phone","previous_country","new_country","preferNationalFormat","derived_country","partial_national_significant_number","maxLength","overflowDigitsCount","formatter","localeCompare","country_calling_prefix","getNationalNumber","getCountryCodes","toUpperCase","PhoneNumberInput","countryOptions","international","validateCountry","validateCountries","validateCountryOptions","pre_selected_country","generate_country_select_options","generateParsedInput","onCountryChange","disabled","autoComplete","countrySelectTabIndex","showCountrySelect","style","inputClassName","getInputClassName","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","InputComponent","inputComponent","flagComponent","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","locale","phoneNumberInputProps","hidePhoneInputField","isFocused","_countrySelectProps","storeCountrySelectInstance","_onFocus","_onBlur","storePhoneNumberInputInstance","onPhoneNumberKeyDown","invalid","hasUserSelectedACountry","old_default_country","old_value","new_default_country","new_value","new_state","onKeyDown","bool","arrayOf","node","old_parsed_input","old_country","new_parsed_input","hide","number_input","country_select","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","icon","transform","optionsOnTop","optionsOnBottom","appendTo","divider","option","splice","concat","throwCountryNotFound","CountrySelectNative","tabIndex","SelectArrow","selectArrowComponent","selectedOption","PhoneInputNative","storeInputRef","countrySelectArrowComponent","PhoneInputNativeDefaultMetadata","formatPhoneNumberDefaultMetadata","parameters","apply","isValidPhoneNumberDefaultMetadata","registerBlockType","wp","blocks","__","i18n","title","category","supports","html","attributes","edit","setAttributes","save"],"mappings":"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,CAAC,MAAMC,GAAG,CAAC,MAAMC,GAAG,CAAC,MAAMC,GAAG,CAAC,MAAMC,GAAG,CAAC,MAAMC,GAAG,CAAC,MAAMC,GAAG,CAAC,MAAMC,GAAG,CAAC,MAAMC,GAAG,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,KAAK,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,KAAK,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,KAAK,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,KAAK,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,KAAK,KAAK,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,KAAK,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,OAAOC,IAAI,CAAC,OAAOC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,MAAMC,IAAI,CAAC,OAAOC,IAAI,CAAC,OAAOC,I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","file":"contact-phone.map","sourceRoot":"","sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/** @license React v16.6.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var k=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.concurrent_mode\"):60111,y=n?Symbol.for(\"react.forward_ref\"):60112,z=n?Symbol.for(\"react.suspense\"):60113,A=n?Symbol.for(\"react.memo\"):\n60115,B=n?Symbol.for(\"react.lazy\"):60116,C=\"function\"===typeof Symbol&&Symbol.iterator;function aa(a,b,e,c,d,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var l=[e,c,d,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name=\"Invariant Violation\"}a.framesToPop=1;throw a;}}\nfunction D(a){for(var b=arguments.length-1,e=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=0;c<b;c++)e+=\"&args[]=\"+encodeURIComponent(arguments[c+1]);aa(!1,\"Minified React error #\"+a+\"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \",e)}var E={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};\nfunction G(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E}G.prototype.isReactComponent={};G.prototype.setState=function(a,b){\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a?D(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};G.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function H(){}H.prototype=G.prototype;function I(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E}var J=I.prototype=new H;\nJ.constructor=I;k(J,G.prototype);J.isPureReactComponent=!0;var K={current:null,currentDispatcher:null},L=Object.prototype.hasOwnProperty,M={key:!0,ref:!0,__self:!0,__source:!0};\nfunction N(a,b,e){var c=void 0,d={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];d.children=l}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:p,type:a,key:g,ref:h,props:d,_owner:K.current}}\nfunction ba(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,e,c){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,e,c){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return e(c,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var h=0;h<a.length;h++){d=a[h];var f=b+U(d,h);g+=T(d,f,e,c)}else if(null===a||\"object\"!==typeof a?f=null:(f=C&&a[C]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),h=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,h++),g+=T(d,f,e,c);else\"object\"===d&&(e=\"\"+a,D(\"31\",\"[object Object]\"===e?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":e,\"\"));return g}function V(a,b,e){return null==a?0:T(a,\"\",b,e)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ca(a,b){a.func.call(a.context,b,a.count++)}\nfunction da(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,e,function(a){return a}):null!=a&&(O(a)&&(a=ba(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+e)),c.push(a))}function W(a,b,e,c,d){var g=\"\";null!=e&&(g=(\"\"+e).replace(P,\"$&/\")+\"/\");b=R(b,g,c,d);V(a,da,b);S(b)}\nvar X={Children:{map:function(a,b,e){if(null==a)return a;var c=[];W(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=R(null,null,b,e);V(a,ca,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];W(a,b,null,function(a){return a});return b},only:function(a){O(a)?void 0:D(\"143\");return a}},createRef:function(){return{current:null}},Component:G,PureComponent:I,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,\n_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:y,render:a}},lazy:function(a){return{$$typeof:B,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return{$$typeof:A,type:a,compare:void 0===b?null:b}},Fragment:r,StrictMode:t,Suspense:z,createElement:N,cloneElement:function(a,b,e){null===a||void 0===a?D(\"267\",a):void 0;var c=void 0,d=k({},a.props),g=a.key,h=a.ref,f=a._owner;\nif(null!=b){void 0!==b.ref&&(h=b.ref,f=K.current);void 0!==b.key&&(g=\"\"+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=void 0===b[c]&&void 0!==l?l[c]:b[c])}c=arguments.length-2;if(1===c)d.children=e;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];d.children=l}return{$$typeof:p,type:a.type,key:g,ref:h,props:d,_owner:f}},createFactory:function(a){var b=N.bind(null,a);b.type=a;return b},isValidElement:O,version:\"16.6.3\",\n__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:K,assign:k}};X.unstable_ConcurrentMode=x;X.unstable_Profiler=u;var Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n",null,"import React from 'react'\r\n\r\nexport default function InternationalIcon()\r\n{\r\n\treturn (\r\n\t\t<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n\t\t viewBox=\"0 0 356.926 356.926\">\r\n\t\t\t<g>\r\n\t\t\t\t<g>\r\n\t\t\t\t\t<path d=\"M211.89,213.669c0-10.475-8.521-18.997-18.996-18.997c-0.401,0-0.799,0.017-1.193,0.041v2.406\r\n\t\t\t\t\t\tc0.396-0.028,0.79-0.061,1.193-0.061c9.158,0,16.608,7.452,16.608,16.611s-7.45,16.61-16.608,16.61\r\n\t\t\t\t\t\tc-0.269,0-0.53-0.027-0.795-0.041v0.897v1.509v4.723H186.2v3.182h13.388v-3.182h-5.104v-4.774\r\n\t\t\t\t\t\tC204.218,231.781,211.89,223.607,211.89,213.669z\"/>\r\n\t\t\t\t\t<g>\r\n\t\t\t\t\t\t<polygon points=\"260.072,79.408 260.398,82.045 256.447,82.882 255.913,88.517 260.677,88.517 266.998,87.913 270.251,84.021\r\n\t\t\t\t\t\t\t266.788,82.678 264.883,80.488 262.024,75.858 260.677,69.329 255.286,70.409 253.799,72.721 253.799,75.312 256.378,77.084\r\n\t\t\t\t\t\t\t\"/>\r\n\t\t\t\t\t\t<polygon points=\"255.495,81.569 255.773,78.037 252.637,76.683 248.233,77.706 244.945,82.94 244.945,86.344 248.768,86.344\r\n\t\t\t\t\t\t\t\"/>\r\n\t\t\t\t\t\t<path d=\"M164.852,96.598l-0.976,2.498h-4.7v2.428h1.121c0,0,0.07,0.511,0.168,1.191l2.876-0.238l1.783-1.121l0.465-2.248\r\n\t\t\t\t\t\t\tl2.335-0.204l0.912-1.888l-2.138-0.442L164.852,96.598z\"/>\r\n\t\t\t\t\t\t<polygon points=\"152.739,101.001 152.565,103.366 155.976,103.081 156.324,100.705 154.279,99.096 \t\t\t\"/>\r\n\t\t\t\t\t\t<path d=\"M356.868,176.633c-0.047-5.223-0.313-10.398-0.802-15.505c-1.662-17.01-5.717-33.311-11.828-48.589\r\n\t\t\t\t\t\t\tc-0.441-1.127-0.859-2.283-1.336-3.41c-8.121-19.183-19.531-36.646-33.474-51.721c-0.906-0.987-1.835-1.952-2.765-2.916\r\n\t\t\t\t\t\t\tc-2.649-2.736-5.333-5.415-8.156-7.971C266.788,17.631,224.642,0,178.463,0C131.896,0,89.447,17.957,57.635,47.271\r\n\t\t\t\t\t\t\tc-7.413,6.832-14.221,14.303-20.408,22.285C13.919,99.717,0,137.49,0,178.463c0,98.398,80.059,178.463,178.463,178.463\r\n\t\t\t\t\t\t\tc69.225,0,129.316-39.643,158.897-97.399c6.32-12.327,11.247-25.491,14.569-39.294c0.837-3.486,1.58-7.018,2.208-10.585\r\n\t\t\t\t\t\t\tc1.801-10.137,2.788-20.56,2.788-31.196C356.902,177.859,356.868,177.249,356.868,176.633z M323.278,105.306l1.022-1.162\r\n\t\t\t\t\t\t\tc1.359,2.637,2.649,5.304,3.846,8.028l-1.708-0.07l-3.172,0.436v-7.233H323.278z M297.484,74.156l0.023-7.971\r\n\t\t\t\t\t\t\tc2.812,2.975,5.508,6.036,8.087,9.214l-3.207,4.781l-11.247-0.111l-0.696-2.341L297.484,74.156z M82.214,54.364v-0.302h3.567\r\n\t\t\t\t\t\t\tl0.325-1.226h5.838v2.55l-1.691,2.236h-8.052v-3.259H82.214z M87.925,62.323c0,0,3.578-0.61,3.892-0.61c0.296,0,0,3.573,0,3.573\r\n\t\t\t\t\t\t\tl-8.081,0.511l-1.534-1.847L87.925,62.323z M334.642,133.156h-13.06l-7.971-5.92l-8.365,0.808v5.112h-2.648l-2.848-2.033\r\n\t\t\t\t\t\t\tl-14.512-3.671v-9.4l-18.38,1.423l-5.705,3.062h-7.285l-3.59-0.36l-8.854,4.926v9.254l-18.097,13.065l1.5,5.583h3.677\r\n\t\t\t\t\t\t\tl-0.964,5.315l-2.58,0.953l-0.133,13.884l15.633,17.823h6.819l0.407-1.081h12.246l3.531-3.265h6.948l3.812,3.811l10.328,1.069\r\n\t\t\t\t\t\t\tl-1.359,13.757l11.503,20.28l-6.064,11.572l0.406,5.438l4.775,4.752v13.095l6.251,8.412v10.897h5.391\r\n\t\t\t\t\t\t\tc-30.046,36.913-75.823,60.534-127.026,60.534c-90.312,0-163.783-73.454-163.783-163.777c0-22.732,4.665-44.401,13.077-64.089\r\n\t\t\t\t\t\t\tv-5.106l5.855-7.11c2.033-3.846,4.212-7.582,6.542-11.235l0.25,2.974l-6.791,8.261c-2.108,3.985-4.084,8.052-5.855,12.217v9.312\r\n\t\t\t\t\t\t\tl6.791,3.276v12.955l6.535,11.136l5.316,0.808l0.68-3.817l-6.245-9.661l-1.237-9.388h3.677l1.557,9.673l9.051,13.193l-2.33,4.27\r\n\t\t\t\t\t\t\tl5.734,8.795l14.291,3.532v-2.306l5.711,0.808l-0.534,4.078l4.484,0.825l6.948,1.888l9.8,11.171l12.507,0.941l1.237,10.207\r\n\t\t\t\t\t\t\tl-8.58,5.984l-0.39,9.115l-1.237,5.588l12.386,15.5l0.947,5.32c0,0,4.49,1.209,5.048,1.209c0.535,0,10.062,7.227,10.062,7.227\r\n\t\t\t\t\t\t\tv28.024l3.393,0.964l-2.294,12.92l5.71,7.634l-1.068,12.827l7.563,13.269l9.696,8.47l9.731,0.197l0.952-3.148l-7.163-6.029\r\n\t\t\t\t\t\t\tl0.418-2.986l1.272-3.684l0.273-3.741l-4.839-0.14l-2.44-3.066l4.021-3.881l0.546-2.916l-4.496-1.29l0.261-2.719l6.402-0.976\r\n\t\t\t\t\t\t\tl9.73-4.672l3.265-6.006l10.196-13.06l-2.312-10.213l3.131-5.438l9.399,0.278l6.327-5.02l2.051-19.693l7.04-8.877l1.237-5.704\r\n\t\t\t\t\t\t\tl-6.39-2.045l-4.224-6.942l-14.419-0.145l-11.444-4.351l-0.534-8.162l-3.811-6.675l-10.335-0.145l-5.995-9.382l-5.298-2.585\r\n\t\t\t\t\t\t\tl-0.273,2.858l-9.672,0.569l-3.532-4.926l-10.079-2.045l-8.302,9.603l-13.065-2.23l-0.953-14.727l-9.527-1.632l3.805-7.221\r\n\t\t\t\t\t\t\tl-1.092-4.148l-12.531,8.371l-7.877-0.964l-2.817-6.158l1.737-6.355l4.339-8.005l9.998-5.072h19.322l-0.064,5.891l6.948,3.235\r\n\t\t\t\t\t\t\tl-0.558-10.062l5.007-5.037l10.103-6.64l0.703-4.659l10.068-10.486l10.707-5.937l-0.941-0.773l7.256-6.826l2.655,0.703\r\n\t\t\t\t\t\t\tl1.214,1.522l2.76-3.062l0.68-0.296l-3.021-0.43l-3.084-0.987v-2.963l1.632-1.33h3.579l1.655,0.726l1.418,2.858l1.737-0.267\r\n\t\t\t\t\t\t\tv-0.244l0.5,0.163l5.02-0.772l0.714-2.463l2.852,0.726v2.667l-2.666,1.818h0.018l0.377,2.928l9.115,2.794c0,0,0,0.035,0.023,0.11\r\n\t\t\t\t\t\t\tl2.079-0.18l0.146-3.939l-7.209-3.282l-0.396-1.894l5.972-2.033l0.273-5.722l-6.245-3.805l-0.412-9.667l-8.581,4.218h-3.143\r\n\t\t\t\t\t\t\tl0.837-7.355l-11.688-2.748l-4.816,3.654v11.119l-8.673,2.754l-3.486,7.244l-3.758,0.604v-9.277l-8.162-1.133l-4.096-2.667\r\n\t\t\t\t\t\t\tl-1.639-6.007l14.611-8.54l7.14-2.179l0.72,4.804l3.991-0.215l0.308-2.411l4.166-0.599l0.07-0.842l-1.784-0.738l-0.407-2.544\r\n\t\t\t\t\t\t\tl5.118-0.43l3.091-3.213l0.18-0.238l0.035,0.012l0.941-0.976l10.753-1.354l4.746,4.032l-12.467,6.64l15.871,3.747l2.045-5.31\r\n\t\t\t\t\t\t\th6.948l2.44-4.625l-4.903-1.226v-5.856l-15.359-6.803l-10.62,1.226l-6.001,3.125l0.407,7.628l-6.257-0.953l-0.964-4.212\r\n\t\t\t\t\t\t\tl6.007-5.449l-10.898-0.535l-3.125,0.953l-1.359,3.677l4.084,0.686l-0.813,4.084l-6.936,0.406l-1.092,2.725L118.987,52.4\r\n\t\t\t\t\t\t\tc0,0-0.273-5.711-0.703-5.711c-0.389,0,7.901-0.145,7.901-0.145l5.995-5.85l-3.271-1.632l-4.339,4.223l-7.222-0.406l-4.403-6.019\r\n\t\t\t\t\t\t\th-9.254L94.03,44.07h8.848l0.796,2.597l-2.307,2.172l9.807,0.279l1.487,3.532l-11.032-0.407l-0.546-2.725l-6.925-1.499\r\n\t\t\t\t\t\t\tl-3.689-2.033l-8.255,0.069c27.043-19.699,60.284-31.358,96.226-31.358c41.403,0,79.263,15.476,108.124,40.915l-1.929,3.474\r\n\t\t\t\t\t\t\tl-7.564,2.962l-3.194,3.462l0.743,4.02l3.893,0.546l2.358,5.867l6.704-2.713l1.127,7.86h-2.045l-5.519-0.819l-6.111,1.022\r\n\t\t\t\t\t\t\tl-5.926,8.377l-8.458,1.319l-1.221,7.25l3.579,0.842l-1.046,4.665l-8.412-1.69l-7.703,1.69l-1.639,4.293l1.325,9.01l4.531,2.115\r\n\t\t\t\t\t\t\tl7.61-0.046l5.123-0.465l1.58-4.078l8.018-10.422l5.264,1.081l5.193-4.7l0.976,3.678l12.78,8.621l-1.557,2.108l-5.763-0.308\r\n\t\t\t\t\t\t\tl2.23,3.137l3.556,0.79l4.159-1.737l-0.093-5.002l1.859-0.923l-1.487-1.575l-8.528-4.758l-2.254-6.314h7.099l2.243,2.248\r\n\t\t\t\t\t\t\tl6.134,5.257l0.244,6.367l6.332,6.733l2.348-9.231l4.392-2.394l0.802,7.552l4.287,4.7l8.54-0.139\r\n\t\t\t\t\t\t\tc1.661,4.247,3.148,8.563,4.427,12.978L334.642,133.156z M97.324,81.092l4.27-2.044l3.881,0.929l-1.324,5.211l-4.183,1.319\r\n\t\t\t\t\t\t\tL97.324,81.092z M120.073,93.35v3.37h-9.783l-3.689-1.028l0.918-2.341l4.7-1.94h6.437v1.94H120.073z M124.582,98.05v3.259\r\n\t\t\t\t\t\t\tl-2.463,1.58l-3.044,0.575c0,0,0-4.903,0-5.415H124.582z M121.822,96.72v-3.893l3.363,3.067L121.822,96.72z M123.355,104.568\r\n\t\t\t\t\t\t\tv3.178l-2.347,2.347h-5.211l0.813-3.573l2.463-0.215l0.5-1.226L123.355,104.568z M110.39,98.05h5.408l-6.948,9.696l-2.852-1.534\r\n\t\t\t\t\t\t\tl0.616-4.084L110.39,98.05z M132.529,103.464v3.166h-5.211l-1.417-2.062v-2.951h0.406L132.529,103.464z M127.748,99.096\r\n\t\t\t\t\t\t\tl1.475-1.557l2.498,1.557l-1.999,1.656L127.748,99.096z M337.291,141.428l0.511-0.61c0.232,0.93,0.441,1.859,0.662,2.789\r\n\t\t\t\t\t\t\tL337.291,141.428z\"/>\r\n\t\t\t\t\t\t<path d=\"M27.734,109.268v5.106c1.771-4.177,3.747-8.231,5.855-12.223L27.734,109.268z\"/>\r\n\t\t\t\t\t</g>\r\n\t\t\t\t</g>\r\n\t\t\t</g>\r\n\t\t</svg>\r\n\t)\r\n}","import PropTypes from 'prop-types'\r\n\r\nexport const metadata = PropTypes.shape\r\n({\r\n\tcountry_calling_codes : PropTypes.object.isRequired,\r\n\tcountries : PropTypes.object.isRequired\r\n})\r\n\r\nexport const labels = PropTypes.objectOf(PropTypes.string)","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n","module.exports = function cmp (a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n","import compare from 'semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nexport default class Metadata\r\n{\r\n\tconstructor(metadata)\r\n\t{\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.v1 = !metadata.version\r\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1\r\n\t\tthis.v3 = metadata.version !== undefined // && compare(metadata.version, V4) === -1\r\n\t}\r\n\r\n\thasCountry(country)\r\n\t{\r\n\t\treturn this.metadata.countries[country] !== undefined\r\n\t}\r\n\r\n\tcountry(country)\r\n\t{\r\n\t\tif (!country)\r\n\t\t{\r\n\t\t\tthis._country = undefined\r\n\t\t\tthis.country_metadata = undefined\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tif (!this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthrow new Error(`Unknown country: ${country}`)\r\n\t\t}\r\n\r\n\t\tthis._country = country\r\n\t\tthis.country_metadata = this.metadata.countries[country]\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetDefaultCountryMetadataForRegion()\r\n\t{\r\n\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]]\r\n\t}\r\n\r\n\tcountryCallingCode()\r\n\t{\r\n\t\treturn this.country_metadata[0]\r\n\t}\r\n\r\n\tIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.country_metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return this.country_metadata[1]\r\n\t\treturn this.country_metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.v1) return\r\n\t\treturn this.country_metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats()\r\n\t{\r\n\t\tconst formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(country_metadata)\r\n\t{\r\n\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tnationalPrefixForParsing()\r\n\t{\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when parsing\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes()\r\n\t{\r\n\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes()\r\n\t{\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type)\r\n\t{\r\n\t\tif (this.hasTypes() && getType(this.types(), type))\r\n\t\t{\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text()\r\n\t{\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n\r\n\tcountryCallingCodes()\r\n\t{\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\t//\r\n\t// `country_calling_code` is always valid.\r\n\t// But the actual country may not necessarily be part of the metadata.\r\n\t//\r\n\tchooseCountryByCountryCallingCode(country_calling_code)\r\n\t{\r\n\t\tconst country = this.countryCallingCodes()[country_calling_code][0]\r\n\r\n\t\t// Do not want to test this case.\r\n\t\t// (custom metadata, not all countries).\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.hasCountry(country))\r\n\t\t{\r\n\t\t\tthis.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\tselectedCountry()\r\n\t{\r\n\t\treturn this._country\r\n\t}\r\n}\r\n\r\nclass Format\r\n{\r\n\tconstructor(format, metadata)\r\n\t{\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat()\r\n\t{\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns()\r\n\t{\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule()\r\n\t{\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormatting()\r\n\t{\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormatting()\r\n\t{\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix()\r\n\t{\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\r\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\r\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\r\n\t}\r\n\r\n\tinternationalFormat()\r\n\t{\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\nclass Type\r\n{\r\n\tconstructor(type, metadata)\r\n\t{\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern()\r\n\t{\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths()\r\n\t{\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type)\r\n{\r\n\tswitch (type)\r\n\t{\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata)\r\n{\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif\r\n\t(\r\n\t\t!is_object(metadata) ||\r\n\t\t!is_object(metadata.countries) ||\r\n\t\t(!is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries))\r\n\t)\r\n\t{\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` and \\`.country_calling_codes\\` child object properties. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\nexport function getExtPrefix(country, metadata)\r\n{\r\n\treturn new Metadata(metadata).country(country).ext()\r\n}","import Metadata from './metadata'\r\nimport { matches_entirely, VALID_DIGITS } from './common'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport function getIDDPrefix(country, metadata)\r\n{\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix()))\r\n\t{\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n\r\n\treturn countryMetadata.defaultIDDPrefix()\r\n}\r\n\r\nexport function stripIDDPrefix(number, country, metadata)\r\n{\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if the number is IDD-prefixed.\r\n\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\r\n\t// Some kind of a weird edge case.\r\n\t// No explanation from Google given.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\t/* istanbul ignore next */\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\r\n\t{\r\n\t\tif (matchedGroups[1] === '0')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\treturn number\r\n}","import { parseDigit } from './common'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, value)\r\n{\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+')\r\n\t{\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (value) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\treturn '+'\r\n\t}\r\n\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","import { stripIDDPrefix } from './IDD'\r\nimport Metadata from './metadata'\r\n\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\nconst LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS =\r\n{\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character)\r\n{\r\n\treturn DIGITS[character]\r\n}\r\n\r\n// Parses a formatted phone number\r\n// and returns `{ countryCallingCode, number }`\r\n// where `number` is just the \"number\" part\r\n// which is left after extracting `countryCallingCode`\r\n// and is not necessarily a \"national (significant) number\"\r\n// and might as well contain national prefix.\r\n//\r\nexport function extractCountryCallingCode(number, country, metadata)\r\n{\r\n\tnumber = parseIncompletePhoneNumber(number)\r\n\r\n\tif (!number)\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then don't extract country phone code.\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIDDPrefix(number, country, metadata)\r\n\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0')\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length)\r\n\t{\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\r\n\t\tif (metadata.countryCallingCodes()[countryCallingCode])\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n\r\n// Checks whether the entire input sequence can be matched\r\n// against the regular expression.\r\nexport function matches_entirely(text = '', regular_expression)\r\n{\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n// Pattern to capture digits used in an extension.\r\n// Places a maximum length of '7' for an extension.\r\nconst CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport function create_extension_pattern(purpose)\r\n{\r\n\t// One-character symbols that can be used to indicate an extension.\r\n\tlet single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E'\r\n\r\n\tswitch (purpose)\r\n\t{\r\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\r\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\r\n\t\tcase 'parsing':\r\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters\r\n\t}\r\n\r\n\treturn RFC3966_EXTN_PREFIX +\r\n\t\tCAPTURING_EXTN_DIGITS + '|' +\r\n\t\t'[ \\u00A0\\\\t,]*' +\r\n\t\t'(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\r\n\t\t// \"доб.\"\r\n\t\t'\\u0434\\u043E\\u0431|' +\r\n\t\t'[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' +\r\n\t\t'[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*' +\r\n\t\tCAPTURING_EXTN_DIGITS + '#?|' +\r\n\t\t'[- ]+([' + VALID_DIGITS + ']{1,5})#'\r\n}","import Metadata from './metadata'\r\n\r\nexport default function(country, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (!metadata.hasCountry(country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${country}`)\r\n\t}\r\n\r\n\treturn metadata.country(country).countryCallingCode()\r\n}","import { is_viable_phone_number } from './parse'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text)\r\n{\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';'))\r\n\t{\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name)\r\n\t\t{\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!is_viable_phone_number(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext })\r\n{\r\n\tif (!number)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport\r\n{\r\n\textractCountryCallingCode,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tmatches_entirely,\r\n\tcreate_extension_pattern\r\n}\r\nfrom './common'\r\n\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\n\r\nimport get_number_type, { check_number_length_for_type } from './getNumberType'\r\n\r\nimport { is_possible_number } from './isPossibleNumber'\r\n\r\nimport { parseRFC3966 } from './RFC3966'\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\n// The minimum length of the national significant number.\r\nconst MIN_LENGTH_FOR_NSN = 2\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nconst EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing')\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i')\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp\r\n(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER +\r\n\t\t// Phone number extensions\r\n\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' +\r\n\t'$'\r\n,\r\n'i')\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$')\r\n\r\nconst default_options =\r\n{\r\n\tcountry: {}\r\n}\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { text, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry))\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new Error('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formatted_phone_number, ext } = parse_input(text, options.v2)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formatted_phone_number)\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new Error('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst\r\n\t{\r\n\t\tcountry,\r\n\t\tnational_number : nationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t}\r\n\t= parse_phone_number\r\n\t(\r\n\t\tformatted_phone_number,\r\n\t\toptions.defaultCountry,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.selectedCountry())\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new Error('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new Error('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new Error('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = country && matches_entirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false\r\n\r\n\tif (!options.extended)\r\n\t{\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible : valid ? true : (options.extended === true) && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\r\n\t\tphone : nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport function is_viable_phone_number(number)\r\n{\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\r\nexport function extract_formatted_phone_number(text, v2)\r\n{\r\n\tif (!text)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH)\r\n\t{\r\n\t\tif (v2) {\r\n\t\t\tthrow new Error('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t// Attempt to extract a possible number from the string passed in\r\n\r\n\tconst starts_at = text.search(PHONE_NUMBER_START_PATTERN)\r\n\r\n\tif (starts_at < 0)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(starts_at)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n// Strips any national prefix (such as 0, 1) present in the number provided.\r\n// \"Carrier codes\" are only used  in Colombia and Brazil,\r\n// and only when dialing within those countries from a mobile phone to a fixed line number.\r\nexport function strip_national_prefix_and_carrier_code(number, metadata)\r\n{\r\n\tif (!number || !metadata.nationalPrefixForParsing())\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\t// Attempt to parse the first digits as a national prefix\r\n\tconst national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')')\r\n\tconst national_prefix_matcher = national_prefix_pattern.exec(number)\r\n\r\n\t// If no national prefix is present in the phone number,\r\n\t// but the national prefix is optional for this country,\r\n\t// then consider this phone number valid.\r\n\t//\r\n\t// Google's reference `libphonenumber` implementation\r\n\t// wouldn't recognize such phone numbers as valid,\r\n\t// but I think it would perfectly make sense\r\n\t// to consider such phone numbers as valid\r\n\t// because if a national phone number was originally\r\n\t// formatted without the national prefix\r\n\t// then it must be parseable back into the original national number.\r\n\t// In other words, `parse(format(number))`\r\n\t// must always be equal to `number`.\r\n\t//\r\n\tif (!national_prefix_matcher)\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\tlet national_significant_number\r\n\r\n\t// `national_prefix_for_parsing` capturing groups\r\n\t// (used only for really messy cases: Argentina, Brazil, Mexico, Somalia)\r\n\tconst captured_groups_count = national_prefix_matcher.length - 1\r\n\r\n\t// If the national number tranformation is needed then do it.\r\n\t//\r\n\t// `national_prefix_matcher[captured_groups_count]` means that\r\n\t// the corresponding captured group is not empty.\r\n\t// It can be empty if it's optional.\r\n\t// Example: \"0?(?:...)?\" for Argentina.\r\n\t//\r\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count])\r\n\t{\r\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule())\r\n\t}\r\n\t// Else, no transformation is necessary,\r\n\t// and just strip the national prefix.\r\n\telse\r\n\t{\r\n\t\tnational_significant_number = number.slice(national_prefix_matcher[0].length)\r\n\t}\r\n\r\n\tlet carrierCode\r\n\tif (captured_groups_count > 0)\r\n\t{\r\n\t\tcarrierCode = national_prefix_matcher[1]\r\n\t}\r\n\r\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\r\n\t//\r\n\t// // Verify the parsed national (significant) number for this country\r\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\r\n\t// //\r\n\t// // If the original number (before stripping national prefix) was viable,\r\n\t// // and the resultant number is not, then prefer the original phone number.\r\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\r\n\t// // a national prefix and a leading digit of a valid national phone number,\r\n\t// // like `8` is the national prefix for Russia and both\r\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t// if (matches_entirely(number, national_number_rule) &&\r\n\t// \t\t!matches_entirely(national_significant_number, national_number_rule))\r\n\t// {\r\n\t// \treturn number\r\n\t// }\r\n\r\n\t// Return the parsed national (significant) number\r\n   return {\r\n   \tnumber: national_significant_number,\r\n   \tcarrierCode\r\n   }\r\n}\r\n\r\nexport function find_country_code(country_calling_code, national_phone_number, metadata)\r\n{\r\n\t// Is always non-empty, because `country_calling_code` is always valid\r\n\tconst possible_countries = metadata.countryCallingCodes()[country_calling_code]\r\n\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possible_countries.length === 1)\r\n\t{\r\n\t\treturn possible_countries[0]\r\n\t}\r\n\r\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata)\r\n}\r\n\r\n// Changes `metadata` `country`.\r\nfunction _find_country_code(possible_countries, national_phone_number, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tfor (const country of possible_countries)\r\n\t{\r\n\t\tmetadata.country(country)\r\n\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits())\r\n\t\t{\r\n\t\t\tif (national_phone_number &&\r\n\t\t\t\tnational_phone_number.search(metadata.leadingDigits()) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (get_number_type({ phone: national_phone_number, country }, metadata.metadata))\r\n\t\t{\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parse('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A phone number for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed\r\n\t// then move it to `options`.\r\n\t// `parse('88005553535', 'RU', [options], metadata)`.\r\n\tif (typeof arg_2 !== 'object')\r\n\t{\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions = { defaultCountry: arg_2, ...arg_3 }\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\toptions = { defaultCountry: arg_2 }\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\t// No \"default country\" argument is being passed.\r\n\t// International phone number is passed.\r\n\t// `parse('+78005553535', [options], metadata)`.\r\n\telse\r\n\t{\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\r\n\t// Apply default options.\r\n\tif (options)\r\n\t{\r\n\t\toptions = { ...default_options, ...options }\r\n\t}\r\n\telse\r\n\t{\r\n\t\toptions = default_options\r\n\t}\r\n\r\n\treturn { text, options, metadata: new Metadata(metadata) }\r\n}\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nfunction strip_extension(number)\r\n{\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0)\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst number_without_extension = number.slice(0, start)\r\n\t/* istanbul ignore if - seems a bit of a redundant check */\r\n\tif (!is_viable_phone_number(number_without_extension))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length)\r\n\t{\r\n\t\tif (matches[i] != null && matches[i].length > 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tnumber : number_without_extension,\r\n\t\t\t\text    : matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parse_input(text, v2)\r\n{\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0)\r\n\t{\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\r\n\tlet number = extract_formatted_phone_number(text, v2)\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number || !is_viable_phone_number(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst with_extension_stripped = strip_extension(number)\r\n\tif (with_extension_stripped.ext)\r\n\t{\r\n\t\treturn with_extension_stripped\r\n\t}\r\n\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, national_number, ext)\r\n{\r\n\tconst result =\r\n\t{\r\n\t\tcountry,\r\n\t\tphone : national_number\r\n\t}\r\n\r\n\tif (ext)\r\n\t{\r\n\t\tresult.ext = ext\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\r\nfunction parse_phone_number(formatted_phone_number, default_country, metadata)\r\n{\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata)\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tlet country\r\n\r\n\tif (countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\telse if (default_country)\r\n\t{\r\n\t\tmetadata.country(default_country)\r\n\t\tcountry = default_country\r\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tconst { national_number, carrier_code } = parse_national_number(number, metadata)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = find_country_code(countryCallingCode, national_number, metadata)\r\n\tif (exactCountry)\r\n\t{\r\n\t\tcountry = exactCountry\r\n\t\tmetadata.country(country)\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnational_number,\r\n\t\tcarrierCode: carrier_code\r\n\t}\r\n}\r\n\r\nfunction parse_national_number(number, metadata)\r\n{\r\n\tlet national_number = parseIncompletePhoneNumber(number)\r\n\tlet carrier_code\r\n\r\n\t// Only strip national prefixes for non-international phone numbers\r\n\t// because national prefixes can't be present in international phone numbers.\r\n\t// Otherwise, while forgiving, it would parse a NANPA number `+1 1877 215 5230`\r\n\t// first to `1877 215 5230` and then, stripping the leading `1`, to `877 215 5230`,\r\n\t// and then it would assume that's a valid number which it isn't.\r\n\t// So no forgiveness for grandmas here.\r\n\t// The issue asking for this fix:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/159\r\n\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(national_number, metadata)\r\n\r\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\r\n\tif (metadata.possibleLengths())\r\n\t{\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tswitch (check_number_length_for_type(potential_national_number, undefined, metadata))\r\n\t\t{\r\n\t\t\tcase 'TOO_SHORT':\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tnational_number = potential_national_number\r\n\t\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t// like `8` is the national prefix for Russia and both\r\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\tif (matches_entirely(national_number, metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matches_entirely(potential_national_number, metadata.nationalNumberPattern()))\r\n\t\t{\r\n\t\t\t// Keep the number without stripping national prefix.\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnational_number = potential_national_number\r\n\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tnational_number,\r\n\t\tcarrier_code\r\n\t}\r\n}\r\n\r\n// Determines the country for a given (possibly incomplete) phone number.\r\n// export function get_country_from_phone_number(number, metadata)\r\n// {\r\n// \treturn parse_phone_number(number, null, metadata).country\r\n// }","import parse, { is_viable_phone_number } from './parse'\r\n\r\nimport { matches_entirely } from './common'\r\n\r\nimport Metadata from './metadata'\r\n\r\nconst non_fixed_line_types =\r\n[\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function get_number_type(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { input, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\tmetadata.country(input.country)\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matches_entirely(nationalNumber, metadata.nationalNumberPattern()))\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata))\r\n\t{\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '')\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE'))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const _type of non_fixed_line_types)\r\n\t{\r\n\t\tif (is_of_type(nationalNumber, _type, metadata))\r\n\t\t{\r\n\t\t\treturn _type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function is_of_type(nationalNumber, type, metadata)\r\n{\r\n\ttype = metadata.type(type)\r\n\r\n\tif (!type || !type.pattern())\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn matches_entirely(nationalNumber, type.pattern())\r\n}\r\n\r\n// Sort out arguments\r\nexport function sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tlet input\r\n\tlet options = {}\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `getNumberType('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If \"default country\" argument is being passed\r\n\t\t// then convert it to an `options` object.\r\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\r\n\t\tif (typeof arg_2 !== 'object')\r\n\t\t{\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `is_viable_phone_number` check.\r\n\t\t\tif (is_viable_phone_number(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, arg_2, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// No \"resrict country\" argument is being passed.\r\n\t\t// International phone number is passed.\r\n\t\t// `getNumberType('+78005553535', metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (arg_3)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_2\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_2\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `is_viable_phone_number` check.\r\n\t\t\tif (is_viable_phone_number(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed phone number.\r\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput = arg_1\r\n\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\treturn { input, options, metadata: new Metadata(metadata) }\r\n}\r\n\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function check_number_length_for_type(nationalNumber, type, metadata)\r\n{\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE')\r\n\t{\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE'))\r\n\t\t{\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\r\n\t\t\treturn check_number_length_for_type(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\r\n\t\tif (mobile_type)\r\n\t\t{\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = merge_arrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths)\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = merge_arrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// }\r\n\t\t\t// else\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info)\r\n\t{\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length)\r\n\t{\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length)\r\n\t{\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length)\r\n\t{\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\nexport function merge_arrays(a, b)\r\n{\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b)\r\n\t{\r\n\t\tif (a.indexOf(element) < 0)\r\n\t\t{\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b)\r\n\t// {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","import { sort_out_arguments, check_number_length_for_type } from './getNumberType'\r\n\r\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isPossibleNumber(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { input, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!metadata.possibleLengths()) {\r\n\t\tthrow new Error('Metadata too old')\r\n\t}\r\n\r\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata)\r\n}\r\n\r\nexport function is_possible_number(national_number, is_international, metadata)\r\n{\r\n\tswitch (check_number_length_for_type(national_number, undefined, metadata))\r\n\t{\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !is_international\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import get_number_type, { sort_out_arguments } from './getNumberType'\r\nimport { matches_entirely } from './common'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { input, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tmetadata.country(input.country)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn get_number_type(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matches_entirely(national_number, metadata.nationalNumberPattern())\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport\r\n{\r\n\t// extractCountryCallingCode,\r\n\tVALID_PUNCTUATION,\r\n\tmatches_entirely\r\n}\r\nfrom './common'\r\n\r\nimport parse from './parse'\r\n\r\nimport { getIDDPrefix } from './IDD'\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst defaultOptions =\r\n{\r\n\tformatExtension: (number, extension, metadata) => `${number}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// format('8005553535', 'RU', 'INTERNATIONAL')\r\n// format('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// format('+78005553535', 'NATIONAL')\r\n// format('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function format(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat_type,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country))\r\n\t\t{\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966\r\n\t\t\t({\r\n\t\t\t\tnumber : `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text    : input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable)\r\n\t\t\t{\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${format_national_number(nationalNumber, 'INTERNATIONAL', metadata)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata)\r\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata)\r\n{\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat ?\r\n\t\t\tformat.internationalFormat() :\r\n\t\t\tformat.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ?\r\n\t\t\t\tformat.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) :\r\n\t\t\t\tformat.format()\r\n\t)\r\n\r\n\tif (useInternationalFormat) {\r\n\t\treturn changeInternationalFormatStyle(formattedNumber)\r\n\t}\r\n\r\n\treturn formattedNumber\r\n}\r\n\r\nfunction format_national_number(number, format_as, metadata)\r\n{\r\n\tconst format = choose_format_for_number(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matches_entirely(national_number, format.pattern()))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport function changeInternationalFormatStyle(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tlet input\r\n\tlet format_type\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat_type = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput       = arg_1\r\n\t\tformat_type = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\tif (format_type === 'International') {\r\n\t\tformat_type = 'INTERNATIONAL'\r\n\t} else if (format_type === 'National') {\r\n\t\tformat_type = 'NATIONAL'\r\n\t}\r\n\r\n\t// Validate `format_type`.\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'E.164':\r\n\t\tcase 'INTERNATIONAL':\r\n\t\tcase 'NATIONAL':\r\n\t\tcase 'RFC3966':\r\n\t\tcase 'IDD':\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\r\n\t}\r\n\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...defaultOptions, ...options }\r\n\t} else {\r\n\t\toptions = defaultOptions\r\n\t}\r\n\r\n\treturn { input, format_type, options, metadata: new Metadata(metadata) }\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\nfunction add_extension(number, ext, metadata, formatExtension)\r\n{\r\n\treturn ext ? formatExtension(number, ext, metadata) : number\r\n}\r\n\r\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata)\r\n{\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode())\r\n\t{\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1')\r\n\t\t{\r\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t\t}\r\n\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber'\r\nimport isValidNumber from './validate'\r\nimport getNumberType from './getNumberType'\r\nimport formatNumber from './format'\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\tconst _metadata = new Metadata(metadata)\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(this, format, options ? { ...options, v2: true } : { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","import PhoneNumber from './PhoneNumber'\r\nimport parse from './parse'\r\n\r\nexport default function parsePhoneNumber(text, defaultCountry, metadata) {\r\n\tif (isObject(defaultCountry)) {\r\n\t\tmetadata = defaultCountry\r\n\t\tdefaultCountry = undefined\r\n\t}\r\n\treturn parse(text, { defaultCountry, v2: true }, metadata)\r\n}\r\n\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import PhoneNumber from './PhoneNumber'\r\n\r\nexport default function getExampleNumber(country, examples, metadata)\r\n{\r\n\treturn new PhoneNumber(country, examples[country], metadata)\r\n}","import { sort_out_arguments } from './getNumberType'\r\nimport isValidNumber from './validate'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters.\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The `country` argument is the country the number must belong to.\r\n * This is a stricter version of `isValidNumber(number, defaultCountry)`.\r\n * Though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Doesn't accept `number` object, only `number` string with a `country` string.\r\n */\r\nexport default function isValidNumberForRegion(number, country, _metadata)\r\n{\r\n\tif (typeof number !== 'string')\r\n\t{\r\n\t\tthrow new TypeError('number must be a string')\r\n\t}\r\n\r\n\tif (typeof country !== 'string')\r\n\t{\r\n\t\tthrow new TypeError('country must be a string')\r\n\t}\r\n\r\n\tconst { input, metadata } = sort_out_arguments(number, country, _metadata)\r\n\r\n\treturn input.country === country && isValidNumber(input, metadata.metadata)\r\n}","/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n","import { trimAfterFirstMatch } from './util'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}","// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// Javascript doesn't support UTF-8 regular expressions.\r\n// So mimicking them here.\r\n\r\n// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\r\n\r\nconst _pZ = '\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\nexport const pZ = `[${_pZ}]`\r\nexport const PZ = `[^${_pZ}]`\r\n\r\nexport const _pN = '\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\n// const pN = `[${_pN}]`\r\n\r\nconst _pNd = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\nexport const pNd = `[${_pNd}]`\r\n\r\nexport const _pL = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\nconst pL = `[${_pL}]`\r\nconst pL_regexp = new RegExp(pL)\r\n\r\nconst _pSc = '\\u0024\\u00A2-\\u00A5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\nconst pSc = `[${_pSc}]`\r\nconst pSc_regexp = new RegExp(pSc)\r\n\r\nconst _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26'\r\nconst pMn = `[${_pMn}]`\r\nconst pMn_regexp = new RegExp(pMn)\r\n\r\nconst _InBasic_Latin = '\\u0000-\\u007F'\r\nconst _InLatin_1_Supplement = '\\u0080-\\u00FF'\r\nconst _InLatin_Extended_A = '\\u0100-\\u017F'\r\nconst _InLatin_Extended_Additional = '\\u1E00-\\u1EFF'\r\nconst _InLatin_Extended_B = '\\u0180-\\u024F'\r\nconst _InCombining_Diacritical_Marks = '\\u0300-\\u036F'\r\n\r\nconst latinLetterRegexp = new RegExp\r\n(\r\n\t'[' +\r\n\t_InBasic_Latin +\r\n\t_InLatin_1_Supplement +\r\n\t_InLatin_Extended_A +\r\n\t_InLatin_Extended_Additional +\r\n\t_InLatin_Extended_B +\r\n\t_InCombining_Diacritical_Marks +\r\n\t']'\r\n)\r\n\r\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\r\nexport function isLatinLetter(letter)\r\n{\r\n\t// Combining marks are a subset of non-spacing-mark.\r\n\tif (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn latinLetterRegexp.test(letter)\r\n}\r\n\r\nexport function isInvalidPunctuationSymbol(character)\r\n{\r\n\treturn character === '%' || pSc_regexp.test(character)\r\n}","// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport\r\n{\r\n\tPLUS_CHARS\r\n}\r\nfrom '../common'\r\n\r\nimport\r\n{\r\n\tlimit\r\n}\r\nfrom './util'\r\n\r\nimport\r\n{\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n}\r\nfrom './utf-8'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","import parse from './parse'\r\nimport Metadata from './metadata'\r\n\r\nimport\r\n{\r\n\tPLUS_CHARS,\r\n\tVALID_PUNCTUATION,\r\n\tVALID_DIGITS,\r\n\tWHITESPACE,\r\n\tcreate_extension_pattern\r\n}\r\nfrom './common'\r\n\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate from './findNumbers/isValidCandidate'\r\n\r\n// Copy-pasted from `./parse.js`.\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing')\r\n\r\nconst WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+')\r\nconst PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$')\r\n\r\n// // Regular expression for getting opening brackets for a valid number\r\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\r\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\r\n\r\nconst VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/\r\n\r\nexport default function findPhoneNumbers(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { text, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata.metadata)\r\n\r\n\tconst phones = []\r\n\r\n\twhile (search.hasNext())\r\n\t{\r\n\t\tphones.push(search.next())\r\n\t}\r\n\r\n\treturn phones\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { text, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\tconst search = new PhoneNumberSearch(text, options, metadata.metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (search.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: search.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\r\nexport class PhoneNumberSearch\r\n{\r\n\t// Iteration tristate.\r\n\tstate = 'NOT_READY'\r\n\r\n\tconstructor(text, options = {}, metadata)\r\n\t{\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n\t\tthis.metadata = metadata\r\n\r\n\t\tthis.regexp = new RegExp\r\n\t\t(\r\n\t\t\tVALID_PHONE_NUMBER +\r\n\t\t\t// Phone number extensions\r\n\t\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?',\r\n\t\t\t'ig'\r\n\t\t)\r\n\r\n\t\t// this.searching_from = 0\r\n\t}\r\n\r\n\tfind()\r\n\t{\r\n\t\tconst matches = this.regexp.exec(this.text)\r\n\r\n\t\tif (!matches) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet number   = matches[0]\r\n\t\tlet startsAt = matches.index\r\n\r\n\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '')\r\n\t\tstartsAt += matches[0].length - number.length\r\n\t\t// Fixes not parsing numbers with whitespace in the end.\r\n\t\t// Also fixes not parsing numbers with opening parentheses in the end.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '')\r\n\r\n\t\tnumber = parsePreCandidate(number)\r\n\r\n\t\tconst result = this.parseCandidate(number, startsAt)\r\n\r\n\t\tif (result) {\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\t// Tail recursion.\r\n\t\t// Try the next one if this one is not a valid phone number.\r\n\t\treturn this.find()\r\n\t}\r\n\r\n\tparseCandidate(number, startsAt)\r\n\t{\r\n\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Don't parse phone numbers which are non-phone numbers\r\n\t\t// due to being part of something else (e.g. a UUID).\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\r\n\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\r\n\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID'))\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// // Prepend any opening brackets left behind by the\r\n\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\r\n\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\r\n\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\r\n\t\t// if (full_number_starts_at >= 0)\r\n\t\t// {\r\n\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\r\n\t\t// \tstartsAt = full_number_starts_at\r\n\t\t// }\r\n\t\t//\r\n\t\t// this.searching_from = matches.lastIndex\r\n\r\n\t\tconst result = parse(number, this.options, this.metadata)\r\n\r\n\t\tif (!result.phone) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tresult.startsAt = startsAt\r\n\t\tresult.endsAt   = startsAt + number.length\r\n\r\n\t\treturn result\r\n\t}\r\n\r\n\thasNext()\r\n\t{\r\n\t\tif (this.state === 'NOT_READY')\r\n\t\t{\r\n\t\t\tthis.last_match = this.find()\r\n\r\n\t\t\tif (this.last_match)\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'READY'\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.state = 'DONE'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.state === 'READY'\r\n\t}\r\n\r\n\tnext()\r\n\t{\r\n\t\t// Check the state and find the next match as a side-effect if necessary.\r\n\t\tif (!this.hasNext())\r\n\t\t{\r\n\t\t\tthrow new Error('No next element')\r\n\t\t}\r\n\r\n\t\t// Don't retain that memory any longer than necessary.\r\n\t\tconst result = this.last_match\r\n\t\tthis.last_match = null\r\n\t\tthis.state = 'NOT_READY'\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\nexport function sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parse('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed\r\n\t// then move it to `options`.\r\n\t// `findNumbers('88005553535', 'RU', [options], metadata)`.\r\n\tif (typeof arg_2 !== 'object')\r\n\t{\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions = { defaultCountry: arg_2, ...arg_3 }\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\toptions = { defaultCountry: arg_2 }\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\t// No \"default country\" argument is being passed.\r\n\t// Only international phone numbers are passed.\r\n\t// `findNumbers('+78005553535', [options], metadata)`.\r\n\telse\r\n\t{\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\r\n\tif (!options)\r\n\t{\r\n\t\toptions = {}\r\n\t}\r\n\r\n\t// // Apply default options.\r\n\t// if (options)\r\n\t// {\r\n\t// \toptions = { ...default_options, ...options }\r\n\t// }\r\n\t// else\r\n\t// {\r\n\t// \toptions = default_options\r\n\t// }\r\n\r\n\treturn { text, options, metadata: new Metadata(metadata) }\r\n}","import parseNumber from '../parse'\r\nimport isValidNumber from '../validate'\r\nimport { parseDigit } from '../common'\r\n\r\nimport\r\n{\r\n\tstartsWith,\r\n\tendsWith\r\n}\r\nfrom './util'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(number, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(number, candidate, metadata)\r\n\t{\r\n\t\tif (!isValidNumber(number, metadata) ||\r\n\t\t\t!containsOnlyValidXChars(number, candidate.toString(), metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n    // Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(number, metadata)\r\n    return true\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(number, candidate, metadata)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped\r\n\t\t)\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n\t * are grouped in the same way that we would have formatted it, or as a single block. For\r\n\t * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t * <p>\r\n\t * Warning: This level might result in lower coverage especially for regions outside of country\r\n\t * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(number, candidate, metadata)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n   \t\tallNumberGroupsAreExactlyPresent\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(number, candidate, metadata)\r\n{\r\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n  // national significant number or (2) an extension sign, in which case they always precede the\r\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n  // or 'X'. We ignore the character if it appears as the last character of the string.\r\n  for (let index = 0; index < candidate.length - 1; index++)\r\n  {\r\n    const charAtIndex = candidate.charAt(index)\r\n\r\n    if (charAtIndex === 'x' || charAtIndex === 'X')\r\n    {\r\n      const charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n      {\r\n        // This is the carrier code case, in which the 'X's always precede the national\r\n        // significant number.\r\n        index++\r\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH)\r\n        {\r\n          return false\r\n        }\r\n\t      // This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t      // extension number.\r\n      }\r\n      else if (parseDigits(candidate.substring(index)) !== number.ext)\r\n      {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(number, _metadata)\r\n{\r\n  // First, check how we deduced the country code. If it was written in international format, then\r\n  // the national prefix is not required.\r\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY')\r\n  {\r\n    return true\r\n  }\r\n\r\n  const phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\r\n  const metadata = util.getMetadataForRegion(phoneNumberRegion)\r\n  if (metadata == null)\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Check if a national prefix should be present when formatting this number.\r\n  const nationalNumber = util.getNationalSignificantNumber(number)\r\n  const formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber)\r\n\r\n  // To do this, we check that a national prefix formatting rule was present\r\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\r\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0)\r\n  {\r\n    if (formatRule.getNationalPrefixOptionalWhenFormatting())\r\n    {\r\n      // The national-prefix is optional in these cases, so we don't need to check if it was\r\n      // present.\r\n      return true\r\n    }\r\n\r\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(\r\n        formatRule.getNationalPrefixFormattingRule()))\r\n    {\r\n      // National Prefix not needed for this number.\r\n      return true\r\n    }\r\n\r\n    // Normalize the remainder.\r\n    const rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput())\r\n\r\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\r\n    // return the result.\r\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate)\r\n{\r\n  const firstSlashInBodyIndex = candidate.indexOf('/')\r\n  if (firstSlashInBodyIndex < 0)\r\n  {\r\n    // No slashes, this is okay.\r\n    return false\r\n  }\r\n\r\n  // Now look for a second one.\r\n  const secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n  if (secondSlashInBodyIndex < 0)\r\n  {\r\n    // Only one slash, this is okay.\r\n    return false\r\n  }\r\n\r\n  // If the first slash is after the country calling code, this is permitted.\r\n  const candidateHasCountryCode =\r\n      (number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN\r\n       || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN)\r\n\r\n  if (candidateHasCountryCode\r\n      && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex))\r\n          === String(number.getCountryCode()))\r\n  {\r\n    // Any more slashes and this is illegal.\r\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid\r\n(\r\n  number,\r\n  candidate,\r\n  metadata,\r\n  checkGroups\r\n)\r\n{\r\n  // TODO: Evaluate how this works for other locales (testing has been limited to NANPA regions)\r\n  // and optimise if necessary.\r\n  const normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n  let formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // If this didn't pass, see if there are any alternate formats, and try them instead.\r\n  const alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n\r\n  if (alternateFormats)\r\n  {\r\n    for (const alternateFormat of alternateFormats.numberFormats())\r\n    {\r\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n\r\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together.\r\n */\r\nfunction getNationalNumberGroups\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n)\r\n{\r\n  if (formattingPattern)\r\n  {\r\n    // We format the NSN only, and split that according to the separator.\r\n    const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n    return util.formatNsnUsingPattern(nationalSignificantNumber,\r\n                                      formattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n  // This will be in the format +CC-DG;ext=EXT where DG represents groups of digits.\r\n  const rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n  // We remove the extension part from the formatted string before splitting it into different\r\n  // groups.\r\n  let endIndex = rfc3966Format.indexOf(';')\r\n  if (endIndex < 0) {\r\n    endIndex = rfc3966Format.length\r\n  }\r\n\r\n  // The country-code will have a '-' following it.\r\n  const startIndex = rfc3966Format.indexOf('-') + 1\r\n  return rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  const candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n  // Set this to the last group, skipping it if the number has an extension.\r\n  let candidateNumberGroupIndex =\r\n      number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n  // First we check if the national significant number is formatted as a block.\r\n  // We use contains and not equals, since the national significant number may be present with\r\n  // a prefix such as a national number prefix, or the country code itself.\r\n  if (candidateGroups.length == 1\r\n      || candidateGroups[candidateNumberGroupIndex].contains(\r\n          util.getNationalSignificantNumber(number)))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Starting from the end, go through in reverse, excluding the first group, and check the\r\n  // candidate and number groups are the same.\r\n  let formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n  {\r\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n    {\r\n      return false\r\n    }\r\n    formattedNumberGroupIndex--\r\n    candidateNumberGroupIndex--\r\n  }\r\n\r\n  // Now check the first group. There may be a national prefix at the start, so we only check\r\n  // that the candidate group ends with the formatted number group.\r\n  return (candidateNumberGroupIndex >= 0\r\n      && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  let fromIndex = 0\r\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n  {\r\n    // First skip the country code if the normalized candidate contained it.\r\n    const countryCode = String(number.getCountryCode())\r\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n  }\r\n\r\n  // Check each group of consecutive digits are not broken into separate groupings in the\r\n  // {@code normalizedCandidate} string.\r\n  for (let i = 0; i < formattedNumberGroups.length; i++)\r\n  {\r\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n    if (fromIndex < 0) {\r\n      return false\r\n    }\r\n    // Moves {@code fromIndex} forward.\r\n    fromIndex += formattedNumberGroups[i].length()\r\n    if (i == 0 && fromIndex < normalizedCandidate.length())\r\n    {\r\n      // We are at the position right after the NDC. We get the region used for formatting\r\n      // information based on the country code in the phone number, rather than the number itself,\r\n      // as we do not need to distinguish between different countries with the same country\r\n      // calling code and this is faster.\r\n      const region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n      if (util.getNddPrefixForRegion(region, true) != null\r\n          && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n        // This means there is no formatting symbol after the NDC. In this case, we only\r\n        // accept the number if there is no formatting symbol at all in the number, except\r\n        // for extensions. This is only important for countries with national prefixes.\r\n        const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n        return startsWith\r\n        (\r\n      \t  normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n           nationalSignificantNumber\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // The check here makes sure that we haven't mistakenly already used the extension to\r\n  // match the last group of the subscriber number. Note the extension cannot have\r\n  // formatting in-between digits.\r\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}\r\n\r\nfunction parseDigits(string)\r\n{\r\n  let result = ''\r\n\r\n  // Using `.split('')` here instead of normal `for ... of`\r\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\r\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n  // (the ones consisting of four bytes) but digits\r\n  // (including non-European ones) don't fall into that range\r\n  // so such \"exotic\" characters would be discarded anyway.\r\n  for (const character of string.split(''))\r\n  {\r\n    const digit = parseDigit(character)\r\n    if (digit) {\r\n      result += digit\r\n    }\r\n  }\r\n\r\n  return result\r\n}","/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport\r\n{\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_COUNTRY_CODE,\r\n\tVALID_PUNCTUATION,\r\n\tcreate_extension_pattern\r\n}\r\nfrom './common'\r\n\r\nimport\r\n{\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n}\r\nfrom './findNumbers/util'\r\n\r\nimport\r\n{\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n}\r\nfrom './findNumbers/utf-8'\r\n\r\nimport Leniency from './findNumbers/Leniency'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate'\r\n\r\nimport formatNumber from './format'\r\nimport parseNumber from './parse'\r\nimport isValidNumber from './validate'\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + create_extension_pattern('matching') + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /** The iteration tristate. */\r\n  state = 'NOT_READY'\r\n\r\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n  searchIndex = 0\r\n\r\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      ...options,\r\n      leniency : options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\r\n      maxTries : options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n\t\tif (!options.leniency)\r\n\t\t{\r\n\t\t\tthrow new TypeError('`Leniency` not supplied')\r\n\t\t}\r\n\r\n\t\tif (options.maxTries < 0)\r\n\t\t{\r\n\t\t\tthrow new TypeError('`maxTries` not supplied')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t/** The degree of validation requested. */\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency)\r\n\t\t{\r\n\t\t\tthrow new TypeError(`Unknown leniency: ${options.leniency}.`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() // (index)\r\n\t{\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null)\r\n\t\t{\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text))\r\n\t\t\t{\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\tconst phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata.metadata)\r\n\t\t\t\t\t\tif (match.ext) {\r\n\t\t\t\t\t\t\tphoneNumber.ext = match.ext\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `candidate`\r\n   * if the whole candidate does not qualify as a match.\r\n   */\r\n  extractInnerMatch(candidate, offset, text)\r\n  {\r\n    for (const innerMatchPattern of INNER_MATCHES)\r\n    {\r\n      let isFirstMatch = true\r\n      let matches\r\n      const possibleInnerMatch = new RegExp(innerMatchPattern, 'g')\r\n      while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0)\r\n      {\r\n        if (isFirstMatch)\r\n        {\r\n          // We should handle any group before this one too.\r\n          const group = trimAfterFirstMatch\r\n          (\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            candidate.slice(0, matches.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(group, offset, text)\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const group = trimAfterFirstMatch\r\n        (\r\n        \tUNWANTED_END_CHAR_PATTERN,\r\n        \tmatches[1]\r\n        )\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a group match start index,\r\n        // therefore using the overall match start index `matches.index`.\r\n        const match = this.parseAndVerify(group, offset + matches.index, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parseNumber` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text)\r\n  {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const number = parseNumber(\r\n      candidate, {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry\r\n      },\r\n      this.metadata.metadata\r\n    )\r\n\r\n    if (!number.possible) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(number, candidate, this.metadata.metadata))\r\n    {\r\n      // // We used parseAndKeepRawInput to create this number,\r\n      // // but for now we don't return the extra values parsed.\r\n      // // TODO: stop clearing all values here and switch all users over\r\n      // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\r\n      // number.clearCountryCodeSource()\r\n      // number.clearRawInput()\r\n      // number.clearPreferredDomesticCarrierCode()\r\n\r\n      const result = {\r\n        startsAt : offset,\r\n        endsAt   : offset + candidate.length,\r\n        country  : number.country,\r\n        phone    : number.phone\r\n      }\r\n\r\n      if (number.ext) {\r\n        result.ext = number.ext\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}","import { sort_out_arguments } from './findPhoneNumbers'\r\nimport PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\nexport default function findNumbers(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { text, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}","import { sort_out_arguments } from './findPhoneNumbers'\r\nimport PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { text, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","// This is an enhanced port of Google Android `libphonenumber`'s\r\n// `asyoutypeformatter.js` of October 26th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\r\n//\r\n// Simplified: does not differentiate between \"local-only\" numbers\r\n// and \"internationally dialable\" numbers.\r\n// For example, doesn't include changes like this:\r\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport\r\n{\r\n\tmatches_entirely,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\textractCountryCallingCode\r\n}\r\nfrom './common'\r\n\r\nimport\r\n{\r\n\textract_formatted_phone_number,\r\n\tfind_country_code,\r\n\tstrip_national_prefix_and_carrier_code\r\n}\r\nfrom './parse'\r\n\r\nimport\r\n{\r\n\tFIRST_GROUP_PATTERN,\r\n\tformat_national_number_using_format,\r\n\tchangeInternationalFormatStyle\r\n}\r\nfrom './format'\r\n\r\nimport\r\n{\r\n\tcheck_number_length_for_type\r\n}\r\nfrom './getNumberType'\r\n\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// The digits that have not been entered yet will be represented by a \\u2008,\r\n// the punctuation space.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = () => /\\[([^\\[\\]])*\\]/g\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = () => /\\d(?=[^,}][^,}])/g\r\n\r\n// A pattern that is used to determine if a `format` is eligible\r\n// to be used by the \"as you type formatter\".\r\n// It is eligible when the `format` contains groups of the dollar sign\r\n// followed by a single digit, separated by valid phone number punctuation.\r\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\r\n// getting into the output of the \"as you type formatter\".\r\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp\r\n(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i')\r\n\r\nexport default class AsYouType\r\n{\r\n\t// Not setting `options` to a constructor argument\r\n\t// not to break backwards compatibility\r\n\t// for older versions of the library.\r\n\toptions = {}\r\n\r\n\t/**\r\n\t * @param {string} [country_code] - The default country used for parsing non-international phone numbers.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(country_code, metadata)\r\n\t{\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\r\n\t\tif (country_code && this.metadata.hasCountry(country_code))\r\n\t\t{\r\n\t\t\tthis.default_country = country_code\r\n\t\t}\r\n\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tinput(text)\r\n\t{\r\n\t\t// Parse input\r\n\r\n\t\tlet extracted_number = extract_formatted_phone_number(text) || ''\r\n\r\n\t\t// Special case for a lone '+' sign\r\n\t\t// since it's not considered a possible phone number.\r\n\t\tif (!extracted_number)\r\n\t\t{\r\n\t\t\tif (text && text.indexOf('+') >= 0)\r\n\t\t\t{\r\n\t\t\t\textracted_number = '+'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate possible first part of a phone number\r\n\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number))\r\n\t\t{\r\n\t\t\treturn this.current_output\r\n\t\t}\r\n\r\n\t\treturn this.process_input(parseIncompletePhoneNumber(extracted_number))\r\n\t}\r\n\r\n\tprocess_input(input)\r\n\t{\r\n\t\t// If an out of position '+' sign detected\r\n\t\t// (or a second '+' sign),\r\n\t\t// then just drop it from the input.\r\n\t\tif (input[0] === '+')\r\n\t\t{\r\n\t\t\tif (!this.parsed_input)\r\n\t\t\t{\r\n\t\t\t\tthis.parsed_input += '+'\r\n\r\n\t\t\t\t// If a default country was set\r\n\t\t\t\t// then reset it because an explicitly international\r\n\t\t\t\t// phone number is being entered\r\n\t\t\t\tthis.reset_countriness()\r\n\t\t\t}\r\n\r\n\t\t\tinput = input.slice(1)\r\n\t\t}\r\n\r\n\t\t// Raw phone number\r\n\t\tthis.parsed_input += input\r\n\r\n\t\t// // Reset phone number validation state\r\n\t\t// this.valid = false\r\n\r\n\t\t// Add digits to the national number\r\n\t\tthis.national_number += input\r\n\r\n\t\t// TODO: Deprecated: rename `this.national_number`\r\n\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\r\n\r\n\t\t// Try to format the parsed input\r\n\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\tif (!this.countryCallingCode)\r\n\t\t\t{\r\n\t\t\t\t// No need to format anything\r\n\t\t\t\t// if there's no national phone number.\r\n\t\t\t\t// (e.g. just the country calling code)\r\n\t\t\t\tif (!this.national_number)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsed_input\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If one looks at country phone codes\r\n\t\t\t\t// then he can notice that no one country phone code\r\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\r\n\t\t\t\t// So if a valid country code is extracted so far\r\n\t\t\t\t// then it means that this is the country code.\r\n\r\n\t\t\t\t// If no country phone code could be extracted so far,\r\n\t\t\t\t// then just return the raw phone number,\r\n\t\t\t\t// because it has no way of knowing\r\n\t\t\t\t// how to format the phone number so far.\r\n\t\t\t\tif (!this.extract_country_calling_code())\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsed_input\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Initialize country-specific data\r\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t\t\tthis.reset_format()\r\n\t\t\t\tthis.determine_the_country()\r\n\t\t\t}\r\n\t\t\t// `this.country` could be `undefined`,\r\n\t\t\t// for instance, when there is ambiguity\r\n\t\t\t// in a form of several different countries\r\n\t\t\t// each corresponding to the same country phone code\r\n\t\t\t// (e.g. NANPA: USA, Canada, etc),\r\n\t\t\t// and there's not enough digits entered\r\n\t\t\t// to reliably determine the country\r\n\t\t\t// the phone number belongs to.\r\n\t\t\t// Therefore, in cases of such ambiguity,\r\n\t\t\t// each time something is input,\r\n\t\t\t// try to determine the country\r\n\t\t\t// (if it's not determined yet).\r\n\t\t\telse if (!this.country)\r\n\t\t\t{\r\n\t\t\t\tthis.determine_the_country()\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Some national prefixes are substrings of other national prefixes\r\n\t\t\t// (for the same country), therefore try to extract national prefix each time\r\n\t\t\t// because a longer national prefix might be available at some point in time.\r\n\r\n\t\t\tconst previous_national_prefix = this.national_prefix\r\n\t\t\tthis.national_number = this.national_prefix + this.national_number\r\n\r\n\t\t\t// Possibly extract a national prefix\r\n\t\t\tthis.extract_national_prefix()\r\n\r\n\t\t\tif (this.national_prefix !== previous_national_prefix)\r\n\t\t\t{\r\n\t\t\t\t// National number has changed\r\n\t\t\t\t// (due to another national prefix been extracted)\r\n\t\t\t\t// therefore national number has changed\r\n\t\t\t\t// therefore reset all previous formatting data.\r\n\t\t\t\t// (and leading digits matching state)\r\n\t\t\t\tthis.matching_formats = undefined\r\n\t\t\t\tthis.reset_format()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if (!this.should_format())\r\n\t\t// {\r\n\t\t// \treturn this.format_as_non_formatted_number()\r\n\t\t// }\r\n\r\n\t\tif (!this.national_number)\r\n\t\t{\r\n\t\t\treturn this.format_as_non_formatted_number()\r\n\t\t}\r\n\r\n\t\t// Check the available phone number formats\r\n\t\t// based on the currently available leading digits.\r\n\t\tthis.match_formats_by_leading_digits()\r\n\r\n\t\t// Format the phone number (given the next digits)\r\n\t\tconst formatted_national_phone_number = this.format_national_phone_number(input)\r\n\r\n\t\t// If the phone number could be formatted,\r\n\t\t// then return it, possibly prepending with country phone code\r\n\t\t// (for international phone numbers only)\r\n\t\tif (formatted_national_phone_number)\r\n\t\t{\r\n\t\t\treturn this.full_phone_number(formatted_national_phone_number)\r\n\t\t}\r\n\r\n\t\t// If the phone number couldn't be formatted,\r\n\t\t// then just fall back to the raw phone number.\r\n\t\treturn this.format_as_non_formatted_number()\r\n\t}\r\n\r\n\tformat_as_non_formatted_number()\r\n\t{\r\n\t\t// Strip national prefix for incorrectly inputted international phones.\r\n\t\tif (this.is_international() && this.countryCallingCode)\r\n\t\t{\r\n\t\t\treturn `+${this.countryCallingCode}${this.national_number}`\r\n\t\t}\r\n\r\n\t\treturn this.parsed_input\r\n\t}\r\n\r\n\tformat_national_phone_number(next_digits)\r\n\t{\r\n\t\t// Format the next phone number digits\r\n\t\t// using the previously chosen phone number format.\r\n\t\t//\r\n\t\t// This is done here because if `attempt_to_format_complete_phone_number`\r\n\t\t// was placed before this call then the `template`\r\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\r\n\t\t//\r\n\t\tlet national_number_formatted_with_previous_format\r\n\t\tif (this.chosen_format)\r\n\t\t{\r\n\t\t\tnational_number_formatted_with_previous_format = this.format_next_national_number_digits(next_digits)\r\n\t\t}\r\n\r\n\t\t// See if the input digits can be formatted properly already. If not,\r\n\t\t// use the results from format_next_national_number_digits(), which does formatting\r\n\t\t// based on the formatting pattern chosen.\r\n\r\n\t\tconst formatted_number = this.attempt_to_format_complete_phone_number()\r\n\r\n\t\t// Just because a phone number doesn't have a suitable format\r\n\t\t// that doesn't mean that the phone is invalid\r\n\t\t// because phone number formats only format phone numbers,\r\n\t\t// they don't validate them and some (rare) phone numbers\r\n\t\t// are meant to stay non-formatted.\r\n\t\tif (formatted_number)\r\n\t\t{\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\r\n\t\t// For some phone number formats national prefix\r\n\r\n\t\t// If the previously chosen phone number format\r\n\t\t// didn't match the next (current) digit being input\r\n\t\t// (leading digits pattern didn't match).\r\n\t\tif (this.choose_another_format())\r\n\t\t{\r\n\t\t\t// And a more appropriate phone number format\r\n\t\t\t// has been chosen for these `leading digits`,\r\n\t\t\t// then format the national phone number (so far)\r\n\t\t\t// using the newly selected phone number pattern.\r\n\r\n\t\t\t// Will return `undefined` if it couldn't format\r\n\t\t\t// the supplied national number\r\n\t\t\t// using the selected phone number pattern.\r\n\r\n\t\t\treturn this.reformat_national_number()\r\n\t\t}\r\n\r\n\t\t// If could format the next (current) digit\r\n\t\t// using the previously chosen phone number format\r\n\t\t// then return the formatted number so far.\r\n\r\n\t\t// If no new phone number format could be chosen,\r\n\t\t// and couldn't format the supplied national number\r\n\t\t// using the selected phone number pattern,\r\n\t\t// then it will return `undefined`.\r\n\r\n\t\treturn national_number_formatted_with_previous_format\r\n\t}\r\n\r\n\treset()\r\n\t{\r\n\t\t// Input stripped of non-phone-number characters.\r\n\t\t// Can only contain a possible leading '+' sign and digits.\r\n\t\tthis.parsed_input = ''\r\n\r\n\t\tthis.current_output = ''\r\n\r\n\t\t// This contains the national prefix that has been extracted. It contains only\r\n\t\t// digits without formatting.\r\n\t\tthis.national_prefix = ''\r\n\r\n\t\tthis.national_number = ''\r\n\t\tthis.carrierCode = ''\r\n\r\n\t\tthis.reset_countriness()\r\n\r\n\t\tthis.reset_format()\r\n\r\n\t\t// this.valid = false\r\n\r\n\t\treturn this\r\n\t}\r\n\r\n\treset_country()\r\n\t{\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\tthis.country = undefined\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.country = this.default_country\r\n\t\t}\r\n\t}\r\n\r\n\treset_countriness()\r\n\t{\r\n\t\tthis.reset_country()\r\n\r\n\t\tif (this.default_country && !this.is_international())\r\n\t\t{\r\n\t\t\tthis.metadata.country(this.default_country)\r\n\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode()\r\n\r\n\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.metadata.country(undefined)\r\n\t\t\tthis.countryCallingCode = undefined\r\n\r\n\t\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\t\t\tthis.available_formats = []\r\n\t\t\tthis.matching_formats = undefined\r\n\t\t}\r\n\t}\r\n\r\n\treset_format()\r\n\t{\r\n\t\tthis.chosen_format = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.partially_populated_template = undefined\r\n\t\tthis.last_match_position = -1\r\n\t}\r\n\r\n\t// Format each digit of national phone number (so far)\r\n\t// using the newly selected phone number pattern.\r\n\treformat_national_number()\r\n\t{\r\n\t\t// Format each digit of national phone number (so far)\r\n\t\t// using the selected phone number pattern.\r\n\t\treturn this.format_next_national_number_digits(this.national_number)\r\n\t}\r\n\r\n\tinitialize_phone_number_formats_for_this_country_calling_code()\r\n\t{\r\n\t\t// Get all \"eligible\" phone number formats for this country\r\n\t\tthis.available_formats = this.metadata.formats().filter((format) =>\r\n\t\t{\r\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat())\r\n\t\t})\r\n\r\n\t\tthis.matching_formats = undefined\r\n\t}\r\n\r\n\tmatch_formats_by_leading_digits()\r\n\t{\r\n\t\tconst leading_digits = this.national_number\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digits patterns already match for a single first digit.\r\n\t\tlet index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (index_of_leading_digits_pattern < 0) {\r\n\t\t\tindex_of_leading_digits_pattern = 0\r\n\t\t}\r\n\r\n\t\t// \"Available formats\" are all formats available for the country.\r\n\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\r\n\t\t// then format matching starts narrowing down the list of possible formats\r\n\t\t// (only previously matched formats are considered for next digits).\r\n\t\tconst available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats\r\n\t\tthis.had_enough_leading_digits = this.should_format()\r\n\r\n\t\tthis.matching_formats = available_formats.filter((format) =>\r\n\t\t{\r\n\t\t\tconst leading_digits_patterns_count = format.leadingDigitsPatterns().length\r\n\r\n\t\t\t// If this format is not restricted to a certain\r\n\t\t\t// leading digits pattern then it fits.\r\n\t\t\tif (leading_digits_patterns_count === 0)\r\n\t\t\t{\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\r\n\t\t\tconst leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1)\r\n\t\t\tconst leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]\r\n\r\n\t\t\t// Brackets are required for `^` to be applied to\r\n\t\t\t// all or-ed (`|`) parts, not just the first one.\r\n\t\t\treturn new RegExp(`^(${leading_digits_pattern})`).test(leading_digits)\r\n\t\t})\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosen_format && this.matching_formats.indexOf(this.chosen_format) === -1)\r\n\t\t{\r\n\t\t\tthis.reset_format()\r\n\t\t}\r\n\t}\r\n\r\n\tshould_format()\r\n\t{\r\n\t\t// Start matching any formats at all when the national number\r\n\t\t// entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives\r\n\t\t// like when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Presumably the limitation of \"3 digits min\"\r\n\t\t// is imposed to exclude false matches,\r\n\t\t// e.g. when there are two different formats\r\n\t\t// each one fitting one or two leading digits being input.\r\n\t\t// But for this case I would propose a specific `if/else` condition.\r\n\t\t//\r\n\t\treturn this.national_number.length >= MIN_LEADING_DIGITS_LENGTH\r\n\t}\r\n\r\n\t// Check to see if there is an exact pattern match for these digits. If so, we\r\n\t// should use this instead of any other formatting template whose\r\n\t// `leadingDigitsPattern` also matches the input.\r\n\tattempt_to_format_complete_phone_number()\r\n\t{\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\r\n\t\t\tif (!matcher.test(this.national_number))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.is_format_applicable(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\t// To leave the formatter in a consistent state\r\n\t\t\tthis.reset_format()\r\n\t\t\tthis.chosen_format = format\r\n\r\n\t\t\tlet formatted_number = format_national_number_using_format\r\n\t\t\t(\r\n\t\t\t\tthis.national_number,\r\n\t\t\t\tformat,\r\n\t\t\t\tthis.is_international(),\r\n\t\t\t\tthis.national_prefix !== '',\r\n\t\t\t\tthis.metadata\r\n\t\t\t)\r\n\r\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t\t// Copied from Google's `libphonenumber`:\r\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\t\tif (this.national_prefix && this.countryCallingCode === '1') {\r\n\t\t\t\tformatted_number = '1 ' + formatted_number\r\n\t\t\t}\r\n\r\n\t\t\t// Set `this.template` and `this.partially_populated_template`.\r\n\t\t\t//\r\n\t\t\t// `else` case doesn't ever happen\r\n\t\t\t// with the current metadata,\r\n\t\t\t// but just in case.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (this.create_formatting_template(format))\r\n\t\t\t{\r\n\t\t\t\t// Populate `this.partially_populated_template`\r\n\t\t\t\tthis.reformat_national_number()\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\r\n\t\t\t\tconst full_number = this.full_phone_number(formatted_number)\r\n\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\r\n\t\t\t\tthis.partially_populated_template = full_number\r\n\t\t\t}\r\n\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode` in case of an international phone number\r\n\tfull_phone_number(formatted_national_number)\r\n\t{\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\treturn `+${this.countryCallingCode} ${formatted_national_number}`\r\n\t\t}\r\n\r\n\t\treturn formatted_national_number\r\n\t}\r\n\r\n\t// Extracts the country calling code from the beginning\r\n\t// of the entered `national_number` (so far),\r\n\t// and places the remaining input into the `national_number`.\r\n\textract_country_calling_code()\r\n\t{\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(this.parsed_input, this.default_country, this.metadata.metadata)\r\n\r\n\t\tif (!countryCallingCode)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\r\n\t\t// Sometimes people erroneously write national prefix\r\n\t\t// as part of an international number, e.g. +44 (0) ....\r\n\t\t// This violates the standards for international phone numbers,\r\n\t\t// so \"As You Type\" formatter assumes no national prefix\r\n\t\t// when parsing a phone number starting from `+`.\r\n\t\t// Even if it did attempt to filter-out that national prefix\r\n\t\t// it would look weird for a user trying to enter a digit\r\n\t\t// because from user's perspective the keyboard \"wouldn't be working\".\r\n\t\tthis.national_number = number\r\n\r\n\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t\treturn this.metadata.selectedCountry() !== undefined\r\n\t}\r\n\r\n\textract_national_prefix()\r\n\t{\r\n\t\tthis.national_prefix = ''\r\n\r\n\t\tif (!this.metadata.selectedCountry())\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Only strip national prefixes for non-international phone numbers\r\n\t\t// because national prefixes can't be present in international phone numbers.\r\n\t\t// Otherwise, while forgiving, it would parse a NANPA number `+1 1877 215 5230`\r\n\t\t// first to `1877 215 5230` and then, stripping the leading `1`, to `877 215 5230`,\r\n\t\t// and then it would assume that's a valid number which it isn't.\r\n\t\t// So no forgiveness for grandmas here.\r\n\t\t// The issue asking for this fix:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/159\r\n\t\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(this.national_number, this.metadata)\r\n\r\n\t\tif (carrierCode) {\r\n\t\t\tthis.carrierCode = carrierCode\r\n\t\t}\r\n\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tif (!this.metadata.possibleLengths() ||\r\n\t\t\tthis.is_possible_number(this.national_number) &&\r\n\t\t\t!this.is_possible_number(potential_national_number))\r\n\t\t{\r\n\t\t\t// Verify the parsed national (significant) number for this country\r\n\t\t\t//\r\n\t\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t\t// like `8` is the national prefix for Russia and both\r\n\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\t\tif (matches_entirely(this.national_number, this.metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matches_entirely(potential_national_number, this.metadata.nationalNumberPattern()))\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.national_prefix = this.national_number.slice(0, this.national_number.length - potential_national_number.length)\r\n\t\tthis.national_number = potential_national_number\r\n\r\n\t\treturn this.national_prefix\r\n\t}\r\n\r\n\tis_possible_number(number)\r\n\t{\r\n\t\tconst validation_result = check_number_length_for_type(number, undefined, this.metadata)\r\n\t\tswitch (validation_result)\r\n\t\t{\r\n\t\t\tcase 'IS_POSSIBLE':\r\n\t\t\t\treturn true\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t// \treturn !this.is_international()\r\n\t\t\tdefault:\r\n\t\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tchoose_another_format()\r\n\t{\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still possible, then stick to it.\r\n\t\t\tif (this.chosen_format === format)\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// If this `format` is suitable for \"as you type\",\r\n\t\t\t// then extract the template from this format\r\n\t\t\t// and use it to format the phone number being input.\r\n\r\n\t\t\tif (!this.is_format_applicable(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.create_formatting_template(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tthis.chosen_format = format\r\n\r\n\t\t\t// With a new formatting template, the matched position\r\n\t\t\t// using the old template needs to be reset.\r\n\t\t\tthis.last_match_position = -1\r\n\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// No format matches the phone number,\r\n\t\t// therefore set `country` to `undefined`\r\n\t\t// (or to the default country).\r\n\t\tthis.reset_country()\r\n\r\n\t\t// No format matches the national phone number entered\r\n\t\tthis.reset_format()\r\n\t}\r\n\r\n\tis_format_applicable(format)\r\n\t{\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and the user didn't input the national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (!this.is_international() && !this.national_prefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If this format doesn't use national prefix\r\n\t\t// but the user did input national prefix\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (this.national_prefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tcreate_formatting_template(format)\r\n\t{\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (format.pattern().indexOf('|') >= 0)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.get_template_for_phone_number_format_pattern(format)\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (!template)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// This one is for national number only\r\n\t\tthis.partially_populated_template = template\r\n\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template\r\n\t\t}\r\n\t\t// For local numbers, replace national prefix\r\n\t\t// with a digit placeholder.\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\r\n\t\t// This one is for the full phone number\r\n\t\treturn this.template\r\n\t}\r\n\r\n\t// Generates formatting template for a phone number format\r\n\tget_template_for_phone_number_format_pattern(format)\r\n\t{\r\n\t\t// A very smart trick by the guys at Google\r\n\t\tconst number_pattern = format.pattern()\r\n\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\tlet dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (this.national_number.length > dummy_phone_number_matching_format_pattern.length)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Prepare the phone number format\r\n\t\tconst number_format = this.get_format_format(format)\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strict_pattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strict_pattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.national_number : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// number_format : `$1 $2 $3`\r\n\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `number_pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.national_number` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then `this.national_number` is used\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\r\n\t\tconst strict_pattern = new RegExp('^' + number_pattern + '$')\r\n\t\tconst national_number_dummy_digits = this.national_number.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.national_number` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then use it\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\t\tif (strict_pattern.test(national_number_dummy_digits))\r\n\t\t{\r\n\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format\r\n\t\treturn dummy_phone_number_matching_format_pattern\r\n\t\t\t// Format the dummy phone number according to the format\r\n\t\t\t.replace(new RegExp(number_pattern), number_format)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\t}\r\n\r\n\tformat_next_national_number_digits(digits)\r\n\t{\r\n\t\t// Using `.split('')` to iterate through a string here\r\n\t\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t\t// `.split('')` is generally not safe for Unicode,\r\n\t\t// but in this particular case for `digits` it is safe.\r\n\t\t// for (const digit of digits)\r\n\t\tfor (const digit of digits.split(''))\r\n\t\t{\r\n\t\t\t// If there is room for more digits in current `template`,\r\n\t\t\t// then set the next digit in the `template`,\r\n\t\t\t// and return the formatted digits so far.\r\n\r\n\t\t\t// If more digits are entered than the current format could handle\r\n\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1)\r\n\t\t\t{\r\n\t\t\t\t// Reset the current format,\r\n\t\t\t\t// so that the new format will be chosen\r\n\t\t\t\t// in a subsequent `this.choose_another_format()` call\r\n\t\t\t\t// later in code.\r\n\t\t\t\tthis.chosen_format = undefined\r\n\t\t\t\tthis.template = undefined\r\n\t\t\t\tthis.partially_populated_template = undefined\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t\t}\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\r\n\t}\r\n\r\n\tis_international()\r\n\t{\r\n\t\treturn this.parsed_input && this.parsed_input[0] === '+'\r\n\t}\r\n\r\n\tget_format_format(format)\r\n\t{\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\treturn changeInternationalFormatStyle(format.internationalFormat())\r\n\t\t}\r\n\r\n\t\t// If national prefix formatting rule is set\r\n\t\t// for this phone number format\r\n\t\tif (format.nationalPrefixFormattingRule())\r\n\t\t{\r\n\t\t\t// If the user did input the national prefix\r\n\t\t\t// (or if the national prefix formatting rule does not require national prefix)\r\n\t\t\t// then maybe make it part of the phone number template\r\n\t\t\tif (this.national_prefix || !format.usesNationalPrefix())\r\n\t\t\t{\r\n\t\t\t\t// Make the national prefix part of the phone number template\r\n\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Special handling for NANPA countries for AsYouType formatter.\r\n\t\t// Copied from Google's `libphonenumber`:\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\r\n\t\telse if (this.countryCallingCode === '1' && this.national_prefix === '1')\r\n\t\t{\r\n\t\t\treturn `1 ${format.format()}`\r\n\t\t}\r\n\r\n\t\treturn format.format()\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermine_the_country()\r\n\t{\r\n\t\tthis.country = find_country_code(this.countryCallingCode, this.national_number, this.metadata)\r\n\t}\r\n\r\n\tgetNumber()\r\n\t{\r\n\t\tif (!this.countryCallingCode || !this.national_number) {\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t\tconst phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.national_number, this.metadata.metadata)\r\n\t\tif (this.carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = this.carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\tgetNationalNumber()\r\n\t{\r\n\t\treturn this.national_number\r\n\t}\r\n\r\n\tgetTemplate()\r\n\t{\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet index = -1\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < this.parsed_input.length)\r\n\t\t{\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\treturn cut_stripping_dangling_braces(this.template, index + 1)\r\n\t}\r\n}\r\n\r\nexport function strip_dangling_braces(string)\r\n{\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length)\r\n\t{\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces)\r\n\t{\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\r\n\treturn cleared_string\r\n}\r\n\r\nexport function cut_stripping_dangling_braces(string, cut_before_index)\r\n{\r\n\tif (string[cut_before_index] === ')') {\r\n\t\tcut_before_index++\r\n\t}\r\n\treturn strip_dangling_braces(string.slice(0, cut_before_index))\r\n}\r\n\r\nexport function close_dangling_braces(template, cut_before)\r\n{\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function count_occurences(symbol, string)\r\n{\r\n\tlet count = 0\r\n\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tif (character === symbol)\r\n\t\t{\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times)\r\n{\r\n\tif (times < 1)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tlet result = ''\r\n\r\n\twhile (times > 1)\r\n\t{\r\n\t\tif (times & 1)\r\n\t\t{\r\n\t\t\tresult += string\r\n\t\t}\r\n\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\r\n\treturn result + string\r\n}","import AsYouType from './AsYouType'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata)\r\n{\r\n\tif (!metadata)\r\n\t{\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}","'use strict'\r\n\r\nexports = module.exports = {}\r\n\r\nexports.parsePhoneNumber = require('./build/parsePhoneNumber').default\r\n\r\n// Deprecated: remove `parse()` export in 2.0.0.\r\n// (renamed to `parseNumber()`)\r\nexports.parse              = require('./build/parse').default\r\nexports.parseNumber        = require('./build/parse').default\r\n// Deprecated: remove `format()` export in 2.0.0.\r\n// (renamed to `formatNumber()`)\r\nexports.format             = require('./build/format').default\r\nexports.formatNumber       = require('./build/format').default\r\nexports.getNumberType      = require('./build/getNumberType').default\r\nexports.getExampleNumber   = require('./build/getExampleNumber').default\r\nexports.isPossibleNumber   = require('./build/isPossibleNumber').default\r\nexports.isValidNumber      = require('./build/validate').default\r\nexports.isValidNumberForRegion = require('./build/isValidNumberForRegion').default\r\n\r\nexports.findNumbers        = require('./build/findNumbers').default\r\nexports.searchNumbers      = require('./build/searchNumbers').default\r\nexports.PhoneNumberMatcher = require('./build/PhoneNumberMatcher').default\r\n\r\n// Deprecated.\r\nexports.findPhoneNumbers   = require('./build/findPhoneNumbers').default\r\nexports.searchPhoneNumbers = require('./build/findPhoneNumbers').searchPhoneNumbers\r\nexports.PhoneNumberSearch  = require('./build/findPhoneNumbers').PhoneNumberSearch\r\n\r\nexports.AsYouType          = require('./build/AsYouType').default\r\n\r\nexports.formatIncompletePhoneNumber = require('./build/formatIncompletePhoneNumber').default\r\nexports.parseIncompletePhoneNumber  = require('./build/parseIncompletePhoneNumber').default\r\nexports.parsePhoneNumberCharacter   = require('./build/parseIncompletePhoneNumber').parsePhoneNumberCharacter\r\n\r\n// `DIGITS` are used by `react-phone-number-input`.\r\n// `DIGIT_PLACEHOLDER` is used by `react-phone-number-input`.\r\nexports.DIGITS            = require('./build/common').DIGITS\r\nexports.DIGIT_PLACEHOLDER = require('./build/AsYouType').DIGIT_PLACEHOLDER\r\n\r\nexports.getCountryCallingCode = require('./build/getCountryCallingCode').default\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexports.getPhoneCode = exports.getCountryCallingCode\r\n\r\nexports.Metadata = require('./build/metadata').default\r\nexports.getExtPrefix = require('./build/metadata').getExtPrefix\r\n\r\nexports.parseRFC3966 = require('./build/RFC3966').parseRFC3966\r\nexports.formatRFC3966 = require('./build/RFC3966').formatRFC3966\r\n\r\n// exports['default'] = ...","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/custom'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n/**\r\n * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n * but still works good enough. When erasing or inserting digits in the middle\r\n * of a phone number the caret usually jumps to the end: this is the expected\r\n * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n */\r\n@reactLifecyclesCompat\r\nexport default class InputBasic extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// The parsed phone number.\r\n\t\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\tvalue : PropTypes.string.isRequired,\r\n\r\n\t\t// Updates the `value`.\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t// Toggles the `--focus` CSS class.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t// `onBlur` workaround for `redux-form`'s bug.\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t// A two-letter country code for formatting `value`\r\n\t\t// as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t// E.g. \"US\", \"RU\", etc.\r\n\t\t// If no `country` is passed then `value`\r\n\t\t// is formatted as an international phone number.\r\n\t\t// (e.g. `+7 800 555 35 35`)\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t// `libphonenumber-js` metadata.\r\n\t\tmetadata : PropTypes.object.isRequired\r\n\t}\r\n\r\n\t// Prevents React from resetting the `<input/>` caret position.\r\n\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t// https://github.com/facebook/react/issues/955\r\n\tstatic getDerivedStateFromProps({ value })\r\n\t{\r\n\t\treturn { value }\r\n\t}\r\n\r\n\tstate = {}\r\n\r\n\tonChange = (event) =>\r\n\t{\r\n\t\tconst { onChange } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\r\n\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t// then Backspace would only erase the rightmost brace\r\n\t\t// becoming something like `\"(123\"`\r\n\t\t// which would give the same `\"123\"` value\r\n\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t// Working around this issue with this simple hack.\r\n\t\tif (newValue === value)\r\n\t\t{\r\n\t\t\tif (this.format(newValue).indexOf(event.target.value) === 0)\r\n\t\t\t{\r\n\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t// https://github.com/facebook/react/issues/955\r\n\t\tthis.setState({ value: newValue }, () => onChange(newValue))\r\n\t}\r\n\r\n\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\r\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t//\r\n\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\r\n\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\r\n\t// `redux-form` shouldn't have taken the new `value` from `event`.\r\n\t//\r\n\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t//\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onBlur } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tif (onBlur)\r\n\t\t{\r\n\t\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\t\tconst _event =\r\n\t\t\t{\r\n\t\t\t\t...event,\r\n\t\t\t\ttarget:\r\n\t\t\t\t{\r\n\t\t\t\t\t...event.target,\r\n\t\t\t\t\tvalue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Workaround for `redux-form` event detection.\r\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\t\treturn onBlur(_event)\r\n\t\t}\r\n\t}\r\n\r\n\tformat(value)\r\n\t{\r\n\t\tconst { country, metadata } = this.props\r\n\r\n\t\treturn formatIncompletePhoneNumber(value, country, metadata)\r\n\t}\r\n\r\n\tfocus = () => this.input.focus()\r\n\r\n\tstoreInput = (ref) => this.input = ref\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonChange,\r\n\t\t\tonFocus,\r\n\t\t\tcountry,\r\n\t\t\tmetadata,\r\n\t\t\t...rest\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t// https://github.com/facebook/react/issues/955\r\n\t\tconst { value } = this.state\r\n\r\n\t\treturn (\r\n\t\t\t<input\r\n\t\t\t\ttype=\"tel\"\r\n\t\t\t\tautoComplete=\"tel\"\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={this.storeInput}\r\n\t\t\t\tvalue={this.format(value)}\r\n\t\t\t\tonChange={this.onChange}\r\n\t\t\t\tonFocus={onFocus}\r\n\t\t\t\tonBlur={this.onBlur}/>\r\n\t\t)\r\n\t}\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n// Default country flag icon.\r\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\r\nconst FlagComponent = ({ country, flags, flagsPath, className }) =>\r\n{\r\n\tif (flags && flags[country])\r\n\t{\r\n\t\treturn flags[country]()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<img\r\n\t\t\talt={country}\r\n\t\t\tclassName=\"react-phone-number-input__icon-image\"\r\n\t\t\tsrc={`${flagsPath}${country.toLowerCase()}.svg`}/>\r\n\t)\r\n}\r\n\r\nFlagComponent.propTypes =\r\n{\r\n\t// The country to be selected by default.\r\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tcountry : PropTypes.string.isRequired,\r\n\r\n\t// Country flag icon components.\r\n\t// By default flag icons are inserted as `<img/>`s\r\n\t// with their `src` pointed to `flag-icon-css` github repo.\r\n\t// There might be cases (e.g. an offline application)\r\n\t// where having a large (3 megabyte) `<svg/>` flags\r\n\t// bundle is more appropriate.\r\n\t// `import flags from 'react-phone-number-input/flags'`.\r\n\tflags : PropTypes.objectOf(PropTypes.func),\r\n\r\n\t// A base URL path for national flag SVG icons.\r\n\t// By default it uses the ones from `flag-icon-css` github repo.\r\n\tflagsPath : PropTypes.string.isRequired\r\n}\r\n\r\nexport default FlagComponent","import\r\n{\r\n\tparseNumber,\r\n\tformatNumber,\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n}\r\nfrom 'libphonenumber-js/custom'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object} parsedNumber - A parsed number object: `{ country, phone }`. Can be an empty object.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry(parsed_number, country, countries, includeInternationalOption, metadata)\r\n{\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (parsed_number.country)\r\n\t{\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = parsed_number.country\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0)\r\n\t{\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && !includeInternationalOption && countries && countries.length > 0)\r\n\t{\r\n\t\tcountry = countries[0]\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions(countries, country_names, includeInternationalOption)\r\n{\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst country_select_options = countries.map((country) =>\r\n\t({\r\n\t\tvalue : country,\r\n\t\tlabel : country_names[country]\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountry_select_options.sort((a, b) => compare_strings(a.label, b.label))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (includeInternationalOption)\r\n\t{\r\n\t\tcountry_select_options.unshift\r\n\t\t({\r\n\t\t\tlabel : country_names.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn country_select_options\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an object having shape `{ country : string, phone : string }`.\r\n * @param {string} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n * // returns `{ country: 'RU', phone: '8005553535' }`\r\n */\r\nexport function parsePhoneNumber(value, metadata)\r\n{\r\n\treturn parseNumber(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} parsedPhone - Object having shape `{ country : string, phone : string }`.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(parsed_phone, metadata)\r\n{\r\n\treturn formatNumber(parsed_phone, 'National', metadata).replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates `<input/>` parsed `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string}\r\n */\r\nexport function migrateParsedInputForNewCountry\r\n(\r\n\tvalue,\r\n\tprevious_country,\r\n\tnew_country,\r\n\tmetadata,\r\n\tpreferNationalFormat\r\n)\r\n{\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!value) {\r\n\t\treturn value\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `value` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (new_country)\r\n\t{\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (value[0] === '+')\r\n\t\t{\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (preferNationalFormat)\r\n\t\t\t{\r\n\t\t\t\t// If a phone number is being input in international form\r\n\t\t\t\t// and the country can already be derived from it,\r\n\t\t\t\t// and if it is the new country, then format as a national number.\r\n\t\t\t\tconst derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\r\n\t\t\t\tif (derived_country === new_country)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn strip_country_calling_code(value, derived_country, metadata)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// If the international phone number already contains\r\n\t\t\t// any country calling code then trim the country calling code part.\r\n\t\t\t// (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// `value` doesn't neccessarily belong to `previous_country`.\r\n\t\t\t// (e.g. if a user enters an international number\r\n\t\t\t//  not belonging to any of the reduced `countries` list)\r\n\t\t\tvalue = strip_country_calling_code(value, previous_country, metadata)\r\n\r\n\t\t\t// Prepend country calling code prefix\r\n\t\t\t// for the newly selected country.\r\n\t\t\treturn `+${getCountryCallingCode(new_country, metadata)}${value}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse\r\n\t{\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (value[0] !== '+')\r\n\t\t{\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\tconst partial_national_significant_number = get_national_significant_number_part(value, previous_country, metadata)\r\n\t\t\treturn formatNumber(partial_national_significant_number, previous_country, 'E.164', metadata)\r\n\t\t}\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata)\r\n{\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+')\r\n\t{\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// If there are any digits then the `value` is returned as is.\r\n\t\treturn number\r\n\t}\r\n\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst partial_national_significant_number = get_national_significant_number_part(number, country, metadata)\r\n\r\n\tif (partial_national_significant_number) {\r\n\t\treturn formatNumber(partial_national_significant_number, country, 'E.164', metadata)\r\n\t}\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function trimNumber(number, country, metadata)\r\n{\r\n\tif (!number || !country) {\r\n\t\treturn number\r\n\t}\r\n\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.country(country)\r\n\tconst possibleLengths = _metadata.possibleLengths()\r\n\r\n\tconst maxLength = possibleLengths[possibleLengths.length - 1]\r\n\tconst nationalSignificantNumberPart = get_national_significant_number_part(number, country, metadata)\r\n\tconst overflowDigitsCount = nationalSignificantNumberPart.length - maxLength\r\n\tif (overflowDigitsCount > 0) {\r\n\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t}\r\n\r\n\treturn number\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForParsedInput\r\n(\r\n\tparsed_input,\r\n\tcountry,\r\n\tcountries,\r\n\tincludeInternationalOption,\r\n\tmetadata\r\n)\r\n{\r\n\tif (parsed_input === '+')\r\n\t{\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = get_country_from_possibly_incomplete_international_phone_number(parsed_input, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0)))\r\n\t{\r\n\t\treturn derived_country\r\n\t}\r\n\t// If \"International\" country option has not been disabled\r\n\t// and the international phone number entered doesn't correspond\r\n\t// to the currently selected country then reset the currently selected country.\r\n\telse if (country &&\r\n\t\tincludeInternationalOption &&\r\n\t\t!could_number_belong_to_country(parsed_input, country, metadata))\r\n\t{\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function get_country_from_possibly_incomplete_international_phone_number(number, metadata)\r\n{\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// `001` is a special \"non-geograpical entity\" code\r\n\t// in Google's `libphonenumber` library.\r\n\tif (formatter.country === '001') {\r\n\t\treturn\r\n\t}\r\n\treturn formatter.country\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\r\nexport function compare_strings(a, b) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function strip_country_calling_code(number, country, metadata)\r\n{\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country)\r\n\t{\r\n\t\tconst country_calling_prefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < country_calling_prefix.length)\r\n\t\t{\r\n\t\t\tif (country_calling_prefix.indexOf(number) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (number.indexOf(country_calling_prefix) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn number.slice(country_calling_prefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes))\r\n\t{\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length)\r\n\t\t{\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n */\r\nexport function get_national_significant_number_part(number, country, metadata)\r\n{\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\r\n\t// Return the parsed partial national phone number.\r\n\treturn formatter.getNationalNumber()\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function could_number_belong_to_country(number, country, metadata)\r\n{\r\n\tconst country_calling_code = getCountryCallingCode(country, metadata)\r\n\r\n\tlet i = 0\r\n\twhile (i + 1 < number.length && i < country_calling_code.length)\r\n\t{\r\n\t\tif (number[i + 1] !== country_calling_code[i])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn true\r\n}","export function getCountryCodes(labels)\r\n{\r\n\t// Includes all country codes (excluding \"ZZ\" for \"International\").\r\n\t//\r\n\t// From ISO 3166-1:2006(E/F):\r\n\t//\r\n\t// 8.1.3   User-assigned code elements\r\n\t//\r\n\t// If users need code elements to represent country names not included\r\n\t// in this part of ISO 3166, the series of letters AA, QM to QZ, XA\r\n\t// to XZ, and ZZ, and the series AAA to AAZ, QMA to QZZ, XAA to XZZ,\r\n\t// and ZZA to ZZZ respectively, and the series of numbers 900 to 999\r\n\t// are available. These users should inform the ISO 3166/MA of such use.\r\n\t//\r\n\treturn Object.keys(labels).filter(key => key.length === 2 && key.toUpperCase() === key && key !== 'ZZ')\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\n// import InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport FlagComponent from './Flag'\r\n\r\nimport\r\n{\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n}\r\nfrom './PropTypes'\r\n\r\nimport\r\n{\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tmigrateParsedInputForNewCountry,\r\n\tgetCountryForParsedInput,\r\n\te164,\r\n\ttrimNumber\r\n}\r\nfrom './input-control'\r\n\r\nimport { getCountryCodes } from './countries'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class PhoneNumberInput extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t/**\r\n\t\t * Phone number in `E.164` format.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `\"+12223333333\"`\r\n\t\t */\r\n\t\tvalue : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value` as the user inputs the phone number.\r\n\t\t */\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Toggles the `--focus` CSS class.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onBlur` is usually passed by `redux-form`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonKeyDown : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables both the phone number `<input/>`\r\n\t\t * and the country `<select/>`.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisabled : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t\t *\r\n\t\t * Web browser's \"autocomplete\" feature\r\n\t\t * remembers the phone number being input\r\n\t\t * and can also autofill the `<input/>`\r\n\t\t * with previously remembered phone numbers.\r\n\t\t *\r\n\t\t * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n\t\t *\r\n\t\t * For example, can be used to turn it off:\r\n\t\t *\r\n\t\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t\t *  One example is when you've implemented your own version\r\n\t\t *  of autocomplete for search. Another example is any form field\r\n\t\t *  where users will input and submit different kinds of information\r\n\t\t *  where it would not be useful to have the browser remember\r\n\t\t *  what was submitted previously\".\r\n\t\t */\r\n\t\t// (is `\"tel\"` by default)\r\n\t\tautoComplete : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to show the initial `value` in\r\n\t\t * \"national\" format rather than \"international\".\r\n\t\t *\r\n\t\t * For example, if this flag is set to `true`\r\n\t\t * and the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t\t *\r\n\t\t * By default, this flag is set to `false`,\r\n\t\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t\t *\r\n\t\t * The reason for such default behaviour is that\r\n\t\t * the newer generation grows up when there are no stationary phones\r\n\t\t * and therefore everyone inputs phone numbers in international format\r\n\t\t * in their smartphones so people gradually get more accustomed to\r\n\t\t * writing phone numbers in international format rather than in local format.\r\n\t\t * Future people won't be using \"national\" format, only \"international\".\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The country to be selected by default.\r\n\t\t * For example, can be set after a GeoIP lookup.\r\n\t\t *\r\n\t\t * Example: `\"US\"`.\r\n\t\t */\r\n\t\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If specified, only these countries will be available for selection.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t\t */\r\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * Custom country `<select/>` option names.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t\t */\r\n\t\tlabels : labelsPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The base URL path for country flag icons.\r\n\t\t * By default it loads country flag icons from\r\n\t\t * `flag-icon-css` repo github pages website.\r\n\t\t * I imagine someone might want to download\r\n\t\t * those country flag icons and host them\r\n\t\t * on their own servers instead.\r\n\t\t */\r\n\t\tflagsPath : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom country flag icon components.\r\n\t\t * These flags replace the default ones.\r\n\t\t *\r\n\t\t * The shape is an object where keys are country codes\r\n\t\t * and values are flag icon components.\r\n\t\t * Flag icon components receive the same properties\r\n\t\t * as `flagComponent` (see below).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"RU\": () => <img src=\"...\"/> }`\r\n\t\t *\r\n\t\t * Can be used to replace the default flags\r\n\t\t * with custom ones for certain (or all) countries.\r\n\t\t *\r\n\t\t * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n\t\t *\r\n\t\t * By default flag icons are inserted as `<img/>`s\r\n\t\t * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n\t\t *\r\n\t\t * There might be some cases\r\n\t\t * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n\t\t * when including the full set of `<svg/>` country flags (3 megabytes)\r\n\t\t * is more appropriate than downloading them individually at runtime only if needed.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `// Uses <svg/> flags (3 megabytes):`\r\n\t\t *\r\n\t\t * `import flags from 'react-phone-number-input/flags'`\r\n\t\t *\r\n\t\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t\t *\r\n\t\t * `<PhoneInput flags={flags} .../>`\r\n\t\t */\r\n\t\tflags : PropTypes.objectOf(PropTypes.func),\r\n\r\n\t\t/**\r\n\t\t * Country flag icon component.\r\n\t\t *\r\n\t\t * Takes properties:\r\n\t\t *\r\n\t\t * * country : string — The country code.\r\n\t\t * * flagsPath : string — The `flagsPath` property (see above).\r\n\t\t * * flags : object — The `flags` property (see above).\r\n\t\t */\r\n\t\tflagComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n\t\t */\r\n\t\tinternational : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom \"International\" country `<select/>` option icon.\r\n\t\t */\r\n\t\tinternationalIcon : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to hide country `<select/>`.\r\n\t\t */\r\n\t\t// (is `true` by default)\r\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * HTML `tabindex` attribute for country `<select/>`.\r\n\t\t */\r\n\t\tcountrySelectTabIndex : PropTypes.number,\r\n\r\n\t\t/**\r\n\t\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t\t *\r\n\t\t * * `\"|\"` — inserts a separator.\r\n\t\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t\t */\r\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS style object.\r\n\t\t */\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS class.\r\n\t\t */\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` CSS class.\r\n\t\t */\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Returns phone number `<input/>` CSS class string.\r\n\t\t * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tgetInputClassName : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Country `<select/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `name : string?` — HTML `name` attribute.\r\n\t\t * * `value : string?` — The currently selected country code.\r\n\t\t * * `onChange(value : string?)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n\t\t * * `disabled : boolean?` — HTML `disabled` attribute.\r\n\t\t * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n\t\t * * `className : string` — CSS class name.\r\n\t\t */\r\n\t\t//\r\n\t\t// (deprecated)\r\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\r\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\r\n\t\t//\r\n\t\tcountrySelectComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t * * `onChange(value : string)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n\t\t * * `metadata : object` — `libphonenumber-js` metadata.\r\n\t\t * * All other properties should be passed through to the underlying `<input/>`.\r\n\t\t *\r\n\t\t * Must also implement `.focus()` method.\r\n\t\t */\r\n\t\tinputComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t * Is `false` by default.\r\n\t\t */\r\n\t\t// smartCaret : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number extension `<input/>` element.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t *\t`ext={<input value={...} onChange={...}/>}`\r\n\t\t */\r\n\t\text : PropTypes.node,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n\t\t */\r\n\t\terror : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The `error` is shown only when `indicateInvalid` is `true`.\r\n\t\t * (which is the default).\r\n\t\t * @deprecated\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tindicateInvalid : PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * Translation JSON object. See the `locales` directory for examples.\r\n\t\t */\r\n\t\tlocale : PropTypes.objectOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t *\r\n\t\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t\t */\r\n\t\tmetadata : metadataPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A long time ago a person requested an `onCountryChange(country)` event listener.\r\n\t\t * No valid reason was given other than compliance with some legacy code\r\n\t\t * which stored both phone number and country in a database.\r\n\t\t * @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t\t */\r\n\t\tonCountryChange : PropTypes.func\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t/**\r\n\t\t * Not disabled.\r\n\t\t */\r\n\t\tdisabled: false,\r\n\r\n\t\t/**\r\n\t\t * Show `error` (if passed).\r\n\t\t * @deprecated\r\n\t\t */\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Flag icon component.\r\n\t\t */\r\n\t\tflagComponent: FlagComponent,\r\n\r\n\t\t/**\r\n\t\t * By default use icons from `flag-icon-css` github repo.\r\n\t\t */\r\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\r\n\r\n\t\t/**\r\n\t\t * Default \"International\" country `<select/>` option icon (globe).\r\n\t\t */\r\n\t\t // internationalIcon: InternationalIcon,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: InputBasic,\r\n\r\n\t\t/**\r\n\t\t * Show country `<select/>`.\r\n\t\t */\r\n\t\tshowCountrySelect: true,\r\n\r\n\t\t/**\r\n\t\t * Don't convert the initially passed phone number `value`\r\n\t\t * to a national phone number for its country.\r\n\t\t * The reason is that the newer generation grows up when\r\n\t\t * there are no stationary phones and therefore everyone inputs\r\n\t\t * phone numbers with a `+` in their smartphones\r\n\t\t * so phone numbers written in international form\r\n\t\t * are gradually being considered more natural than local ones.\r\n\t\t */\r\n\t\tdisplayInitialValueAsLocalNumber: false,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t * Is `false` by default.\r\n\t\t */\r\n\t\t// smartCaret : false,\r\n\r\n\t\t/**\r\n\t\t * Whether to add the \"International\" option\r\n\t\t * to the list of countries.\r\n\t\t */\r\n\t\tinternational : true,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : false\r\n\t}\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props)\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tif (country) {\r\n\t\t\tvalidateCountry(country, metadata)\r\n\t\t}\r\n\t\tif (countries) {\r\n\t\t\tvalidateCountries(countries, metadata)\r\n\t\t}\r\n\t\tif (countryOptions) {\r\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\r\n\t\t}\r\n\r\n\t\tconst parsed_number = parsePhoneNumber(value, metadata)\r\n\r\n\t\tconst pre_selected_country = getPreSelectedCountry\r\n\t\t(\r\n\t\t\tparsed_number,\r\n\t\t\tcountry,\r\n\t\t\tcountries || getCountryCodes(labels),\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.state =\r\n\t\t{\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops : this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry : pre_selected_country,\r\n\r\n\t\t\t// Generate country `<select/>` options.\r\n\t\t\tcountry_select_options : generate_country_select_options(this.props),\r\n\r\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\r\n\t\t\tparsed_input : generateParsedInput(value, parsed_number, this.props),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `parsed_input` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `parsed_input` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { country, onCountryChange } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\r\n\t\tif (onCountryChange && selectedCountry !== country) {\r\n\t\t\tonCountryChange(selectedCountry)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tonCountryChange,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tif (country && country !== prevProps.country) {\r\n\t\t\tvalidateCountry(country, metadata)\r\n\t\t}\r\n\t\tif (countries && countries !== prevProps.countries) {\r\n\t\t\tvalidateCountries(countries, metadata)\r\n\t\t}\r\n\t\tif (countryOptions && countryOptions !== prevProps.countryOptions) {\r\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\r\n\t\t}\r\n\r\n\t\tif (onCountryChange && this.state.country !== prevState.country) {\r\n\t\t\tonCountryChange(this.state.country)\r\n\t\t}\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (new_country) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparsed_input : old_parsed_input,\r\n\t\t\tcountry      : old_country\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\r\n\t\t(\r\n\t\t\told_parsed_input,\r\n\t\t\told_country,\r\n\t\t\tnew_country,\r\n\t\t\tmetadata,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t)\r\n\r\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tthis.focus()\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the default `country` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tcountry : new_country,\r\n\t\t\thasUserSelectedACountry : true,\r\n\t\t\tparsed_input : new_parsed_input,\r\n\t\t\tvalue : new_value\r\n\t\t},\r\n\t\t() =>\r\n\t\t{\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(new_value)\r\n\t\t})\r\n\t}\r\n\r\n\t// Phone number `<input/>` `onKeyDown` handler.\r\n\tonPhoneNumberKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\r\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\r\n\t\t// so can't hijack \"Down arrow\" keypress here.\r\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\r\n\t\t// if (event.keyCode === 40) {\r\n\t\t// \tthis.country_select.toggle()\r\n\t\t// }\r\n\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// `<input/>` `onChange` handler.\r\n\t// Updates `value` property accordingly.\r\n\t// (so that they are kept in sync).\r\n\t// `parsed_input` must be a parsed phone number\r\n\t// or an empty string.\r\n\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\tonChange = (parsed_input) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonChange,\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet { country } = this.state\r\n\r\n\t\tif (parsed_input)\r\n\t\t{\r\n\t\t\t// If the phone number being input is an international one\r\n\t\t\t// then tries to derive the country from the phone number.\r\n\t\t\t// (regardless of whether there's any country currently selected)\r\n\t\t\tif (parsed_input[0] === '+')\r\n\t\t\t{\r\n\t\t\t\tconst old_country = country\r\n\t\t\t\tcountry = getCountryForParsedInput\r\n\t\t\t\t(\r\n\t\t\t\t\tparsed_input,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcountries,\r\n\t\t\t\t\tinternational,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t// If this `onChange()` event was triggered\r\n\t\t\t// as a result of selecting \"International\" country\r\n\t\t\t// then force-prepend a `+` sign if the phone number\r\n\t\t\t// `<input/>` value isn't in international format.\r\n\t\t\telse if (!country)\r\n\t\t\t{\r\n\t\t\t\tparsed_input = '+' + parsed_input\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Trim the input to not exceed the maximum possible number length.\r\n\t\tif (limitMaxLength) {\r\n\t\t\tparsed_input = trimNumber(parsed_input, country, metadata)\r\n\t\t}\r\n\r\n\t\t// Generate the new `value` property.\r\n\t\tconst value = e164(parsed_input, country, metadata)\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tparsed_input,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t},\r\n\t\t// Update the new `value` property.\r\n\t\t// Doing it after the `state` has been updated\r\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t() => onChange(value))\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) =>\r\n\t{\r\n\t\tconst { onFocus } = this.props\r\n\r\n\t\tthis._onFocus()\r\n\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// This `onBlur` interceptor is a workaround for `redux-form`\r\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t//\r\n\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t//\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onBlur } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tthis._onBlur()\r\n\r\n\t\tif (!onBlur) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\tconst _event =\r\n\t\t{\r\n\t\t\t...event,\r\n\t\t\ttarget:\r\n\t\t\t{\r\n\t\t\t\t...event.target,\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// For `redux-form` event detection.\r\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\treturn onBlur(_event)\r\n\t}\r\n\r\n\t// When country `<select/>` is toggled.\r\n\thidePhoneInputField = (hide) =>\r\n\t{\r\n\t\tthis.setState({\r\n\t\t\thidePhoneInputField: hide\r\n\t\t})\r\n\t}\r\n\r\n\t// Can be called externally.\r\n\tfocus = () => this.number_input.focus()\r\n\r\n\tstoreCountrySelectInstance = _ => this.country_select = _\r\n\r\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state)\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thasUserSelectedACountry,\r\n\t\t\tvalue,\r\n\t\t\tprops:\r\n\t\t\t{\r\n\t\t\t\tcountry : old_default_country,\r\n\t\t\t\tvalue   : old_value\r\n\t\t\t}\r\n\t\t}\r\n\t\t= state\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tcountry : new_default_country,\r\n\t\t\tvalue   : new_value\r\n\t\t}\r\n\t\t= props\r\n\r\n\t\tconst new_state = {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t// If the user has already manually selected a country\r\n\t\t\t// then don't override that already selected country\r\n\t\t\t// if the default `country` property changes.\r\n\t\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\t\thasUserSelectedACountry\r\n\t\t}\r\n\r\n\t\t// If `countries` or `labels` or `international` changed\r\n\t\t// then re-generate country `<select/>` options.\r\n\t\tif (props.countries !== state.props.countries ||\r\n\t\t\tprops.labels !== state.props.labels ||\r\n\t\t\tprops.international !== state.props.international)\r\n\t\t{\r\n\t\t\tnew_state.country_select_options = generate_country_select_options(props)\r\n\t\t}\r\n\r\n\t\t// If the default country changed.\r\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t\t// then select it but only if the user hasn't already manually\r\n\t\t// selected a country and no phone number has been entered so far.\r\n\t\t// Because if the user has already started inputting a phone number\r\n\t\t// then he's okay with no country being selected at all (\"International\")\r\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\r\n\t\tif (new_default_country !== old_default_country &&\r\n\t\t\t!hasUserSelectedACountry && !value && !new_value)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tcountry : new_default_country\r\n\t\t\t\t// `value` is `undefined`.\r\n\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If a new `value` is set externally.\r\n\t\t// (e.g. as a result of an ajax API request\r\n\t\t//  to get user's phone after page loaded)\r\n\t\t// The first part — `new_value !== old_value` —\r\n\t\t// is basically `props.value !== prevProps.value`\r\n\t\t// so it means \"if value property was changed externally\".\r\n\t\t// The second part — `new_value !== value` —\r\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t\t// then the country flag would reset on each input.\r\n\t\telse if (new_value !== old_value && new_value !== value)\r\n\t\t{\r\n\t\t\tconst parsed_number = parsePhoneNumber(new_value, metadata)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tparsed_input : generateParsedInput(new_value, parsed_number, props),\r\n\t\t\t\tvalue : new_value,\r\n\t\t\t\tcountry : new_value ? parsed_number.country : country\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `country` didn't change.\r\n\t\t// `value` didn't change.\r\n\t\t// `parsed_input` didn't change, because `value` didn't change.\r\n\t\t//\r\n\t\t// Maybe `new_state.country_select_options` changed.\r\n\t\t// In any case, update `prevProps`.\r\n\t\treturn new_state\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tautoComplete,\r\n\t\t\tcountrySelectTabIndex,\r\n\t\t\tshowCountrySelect,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tinputClassName,\r\n\t\t\tgetInputClassName,\r\n\t\t\tcountrySelectProperties,\r\n\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\r\n\t\t\tcountrySelectComponent : CountrySelectComponent,\r\n\t\t\tinputComponent : InputComponent,\r\n\t\t\t// smartCaret,\r\n\t\t\text,\r\n\r\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tcountry : _,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagsPath,\r\n\t\t\tinternational,\r\n\t\t\tinternationalIcon,\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tlocale,\r\n\t\t\tmetadata,\r\n\t\t\t...phoneNumberInputProps\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thidePhoneInputField,\r\n\t\t\tcountry_select_options,\r\n\t\t\tparsed_input,\r\n\t\t\tisFocused\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// const InputComponent = inputComponent || (smartCaret ? InputSmart : InputBasic)\r\n\r\n\t\t// Extract `countrySelectProperties` from `this.props`\r\n\t\t// also removing them from `phoneNumberInputProps`.\r\n\t\tconst _countrySelectProps = {}\r\n\t\tif (countrySelectProperties)\r\n\t\t{\r\n\t\t\tfor (const key in countrySelectProperties)\r\n\t\t\t{\r\n\t\t\t\tif (this.props.hasOwnProperty(key))\r\n\t\t\t\t{\r\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\r\n\t\t\t\t\tdelete phoneNumberInputProps[key]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames('react-phone-number-input',\r\n\t\t\t\t{\r\n\t\t\t\t\t'react-phone-number-input--focus'   : isFocused,\r\n\t\t\t\t\t'react-phone-number-input--invalid' : error && indicateInvalid\r\n\t\t\t\t},\r\n\t\t\t\tclassName) }>\r\n\r\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\r\n\t\t\t\t<div className=\"react-phone-number-input__row\">\r\n\r\n\t\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t\t{ showCountrySelect &&\r\n\t\t\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\t\t\t{..._countrySelectProps}\r\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\r\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\r\n\t\t\t\t\t\t\tvalue={ country }\r\n\t\t\t\t\t\t\toptions={ country_select_options }\r\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\r\n\t\t\t\t\t\t\tonFocus={ this._onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this._onBlur }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\r\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\r\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\r\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t\t{ !hidePhoneInputField &&\r\n\t\t\t\t\t\t<InputComponent\r\n\t\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\t\tname={ name }\r\n\t\t\t\t\t\t\t{ ...phoneNumberInputProps }\r\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\r\n\t\t\t\t\t\t\tmetadata={ metadata }\r\n\t\t\t\t\t\t\tcountry={ country }\r\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\r\n\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\tonFocus={ this.onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\r\n\t\t\t\t\t\t\tclassName={ classNames\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled, invalid: error && indicateInvalid })\r\n\t\t\t\t\t\t\t) }/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone extension `<input/>` */}\r\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\r\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\r\n\t\t\t\t\t\t\t{labels.ext}\r\n\t\t\t\t\t\t\t{React.cloneElement(ext,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype : ext.props.type === undefined ? 'number' : ext.props.type,\r\n\t\t\t\t\t\t\t\tonFocus : this._onFocus,\r\n\t\t\t\t\t\t\t\tonBlur : this._onBlur,\r\n\t\t\t\t\t\t\t\tclassName : classNames\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled }),\r\n\t\t\t\t\t\t\t\t\text.props.className\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ error && indicateInvalid &&\r\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Generates country `<select/>` options.\r\nfunction generate_country_select_options(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tcountries,\r\n\t\tlabels,\r\n\t\tinternational,\r\n\t\tcountryOptions\r\n\t}\r\n\t= props\r\n\r\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\r\n\r\n\treturn transformCountryOptions(getCountrySelectOptions\r\n\t(\r\n\t\tcountries || getCountryCodes(labels),\r\n\t\tlabels,\r\n\t\tinternational\r\n\t)\r\n\t.map(({ value, label }) =>\r\n\t({\r\n\t\tvalue,\r\n\t\tlabel,\r\n\t\ticon : CountrySelectOptionIcon\r\n\t})),\r\n\tcountryOptions)\r\n}\r\n\r\nfunction createCountrySelectOptionIconComponent(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tflags,\r\n\t\tflagsPath,\r\n\t\tflagComponent : FlagComponent,\r\n\t\tinternationalIcon : InternationalIcon\r\n\t}\r\n\t= props\r\n\r\n\treturn ({ value }) => (\r\n\t\t<div\r\n\t\t\tclassName={classNames('react-phone-number-input__icon',\r\n\t\t\t{\r\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\r\n\t\t\t})}>\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t\t?\r\n\t\t\t\t<FlagComponent\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tflags={flags}\r\n\t\t\t\t\tflagsPath={flagsPath}/>\r\n\t\t\t\t:\r\n\t\t\t\t<InternationalIcon/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Can move some country `<select/>` options\r\n// to the top of the list, for example.\r\n// See `countryOptions` property.\r\nfunction transformCountryOptions(options, transform)\r\n{\r\n\tif (!transform) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\r\n\tfor (const element of transform)\r\n\t{\r\n\t\tif (element === '|')\r\n\t\t{\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t}\r\n\t\telse if (element === '...' || element === '…')\r\n\t\t{\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nfunction generateParsedInput(value, parsed_number, props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tmetadata\r\n\t}\r\n\t= props\r\n\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `displayInitialValueAsLocalNumber` property is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif (displayInitialValueAsLocalNumber && parsed_number.country)\r\n\t{\r\n\t\treturn generateNationalNumberDigits(parsed_number, metadata)\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\nfunction validateCountryOptions(countries, metadata) {\r\n\tfor (const country of countries) {\r\n\t\tif (country && country !== '|' && country !== '...' && country !== '…') {\r\n\t\t\tif (!metadata.countries[country]) {\r\n\t\t\t\tthrowCountryNotFound(country)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction validateCountries(countries, metadata) {\r\n\tfor (const country of countries) {\r\n\t\tif (!metadata.countries[country]) {\r\n\t\t\tthrowCountryNotFound(country)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction validateCountry(country, metadata) {\r\n\tif (!metadata.countries[country]) {\r\n\t\tthrowCountryNotFound(country)\r\n\t}\r\n}\r\n\r\nfunction throwCountryNotFound(country) {\r\n\tthrow new Error(`Country not found: ${country}`)\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nexport default class CountrySelectNative extends Component\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// A two-letter country code.\r\n\t\t// E.g. \"US\", \"RU\", etc.\r\n\t\tvalue : PropTypes.string,\r\n\r\n\t\t// Updates the `value`.\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t// `<select/>` options.\r\n\t\toptions : PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tvalue : PropTypes.string,\r\n\t\t\tlabel : PropTypes.string,\r\n\t\t\tdivider : PropTypes.bool\r\n\t\t})).isRequired,\r\n\r\n\t\t// HTML `name` attribute.\r\n\t\tname : PropTypes.string,\r\n\r\n\t\t// HTML `disabled` attribute.\r\n\t\tdisabled : PropTypes.bool,\r\n\r\n\t\t// HTML `tabIndex` attribute.\r\n\t\ttabIndex : PropTypes.number,\r\n\r\n\t\t// Select arrow component.\r\n\t\tselectArrowComponent : PropTypes.func.isRequired,\r\n\r\n\t\t// Toggles the `--focus` CSS class.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t// Toggles the `--focus` CSS class.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\r\n\t\tonBlur : PropTypes.func\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tselectArrowComponent : () => <div className=\"react-phone-number-input__country-select-arrow\"/>\r\n\t}\r\n\r\n\tonChange = (event) =>\r\n\t{\r\n\t\tconst { onChange } = this.props\r\n\t\tconst value = event.target.value\r\n\t\tonChange(value === 'ZZ' ? undefined : value)\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tvalue,\r\n\t\t\toptions,\r\n\t\t\tonFocus,\r\n\t\t\tonBlur,\r\n\t\t\tdisabled,\r\n\t\t\ttabIndex,\r\n\t\t\tclassName,\r\n\t\t\tselectArrowComponent : SelectArrow\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet selectedOption\r\n\t\tfor (const option of options) {\r\n\t\t\tif (!option.divider && option.value === value) {\r\n\t\t\t\tselectedOption = option\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className={ classNames(className, 'react-phone-number-input__country--native') }>\r\n\t\t\t\t{ selectedOption && React.createElement(selectedOption.icon, ({ value })) }\r\n\r\n\t\t\t\t<select\r\n\t\t\t\t\tname={ name }\r\n\t\t\t\t\tvalue={ value || 'ZZ' }\r\n\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\tonFocus={ onFocus }\r\n\t\t\t\t\tonBlur={ onBlur }\r\n\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\ttabIndex={ tabIndex }\r\n\t\t\t\t\tclassName=\"react-phone-number-input__country-select\">\r\n\t\t\t\t\t{options.map(({ value, label, divider }) => (\r\n\t\t\t\t\t\t<option\r\n\t\t\t\t\t\t\tkey={ divider ? '|' : value || 'ZZ' }\r\n\t\t\t\t\t\t\tvalue={ divider ? '|' : value || 'ZZ' }\r\n\t\t\t\t\t\t\tdisabled={ divider ? true : false }\r\n\t\t\t\t\t\t\tclassName={ divider ? 'react-phone-number-input__country-select-divider' : undefined }>\r\n\t\t\t\t\t\t\t{ label }\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<SelectArrow/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport PhoneInput from './PhoneInput'\r\nimport CountrySelect from './CountrySelectNative'\r\n\r\nexport default class PhoneInputNative extends Component\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Replaces the default country select arrow.\r\n\t\tcountrySelectArrowComponent : PropTypes.func\r\n\t}\r\n\r\n\tstoreInputRef = (ref) => this.input = ref\r\n\r\n\trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<PhoneInput\r\n\t\t\t\t{ ...this.props }\r\n\t\t\t\tref={ this.storeInputRef }\r\n\t\t\t\tcountrySelectComponent={ CountrySelect }\r\n\t\t\t\tcountrySelectProperties={ countrySelectProperties }/>\r\n\t\t)\r\n\t}\r\n\r\n\t// Proxy `.focus()` method.\r\n\tfocus = () => this.input.focus()\r\n}\r\n\r\nconst countrySelectProperties =\r\n{\r\n\tcountrySelectArrowComponent : 'selectArrowComponent'\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nimport labels from '../locale/default.json'\r\nimport internationalIcon from './InternationalIcon'\r\n\r\nimport\r\n{\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n}\r\nfrom './PropTypes'\r\n\r\nimport PhoneInput from './PhoneInputNative'\r\n\r\nexport default class PhoneInputNativeDefaultMetadata extends Component\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\tmetadata : metadataPropType.isRequired,\r\n\t\tlabels : labelsPropType.isRequired,\r\n\t\tinternationalIcon : PropTypes.func.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tmetadata,\r\n\t\tlabels,\r\n\t\tinternationalIcon\r\n\t}\r\n\r\n\tstoreInputRef = (ref) => this.input = ref\r\n\trender = () => <PhoneInput ref={this.storeInputRef} {...this.props}/>\r\n\tfocus = () => this.input.focus()\r\n}","import { formatNumber } from 'libphonenumber-js/custom'\r\nimport metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nexport default function formatPhoneNumberDefaultMetadata()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatNumber.apply(this, parameters)\r\n}","import { isValidNumber } from 'libphonenumber-js/custom'\r\nimport metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nexport default function isValidPhoneNumberDefaultMetadata()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumber.apply(this, parameters)\r\n}","export { default as default } from './modules/PhoneInputNativeDefaultMetadata'\r\nexport { default as PhoneInput } from './modules/PhoneInput'\r\nexport { default as formatPhoneNumber } from './modules/formatPhoneNumberDefaultMetadata'\r\nexport { default as isValidPhoneNumber } from './modules/isValidPhoneNumberDefaultMetadata'","/** @format */\n\n/**\n * External dependencies\n */\n\nconst {\n\tregisterBlockType\n} = wp.blocks;\n\nconst {\n\t__\n} = wp.i18n;\n\n\nimport 'react-phone-number-input/style.css'\nimport './contact-phone.scss'\n\nimport PhoneInput from 'react-phone-number-input'\nimport { formatPhoneNumber } from 'react-phone-number-input'\n\nregisterBlockType( 'random-blocks/contact-phone', {\n\ttitle: __( 'Phone Number', 'random-blocks' ),\n\ticon: ( <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M22 3H2C.9 3 0 3.9 0 5v14c0 1.1.9 2 2 2h20c1.1 0 1.99-.9 1.99-2L24 5c0-1.1-.9-2-2-2zm0 16H2V5h20v14zm-2.99-1.01L21 16l-1.51-2h-1.64c-.22-.63-.35-1.3-.35-2s.13-1.37.35-2h1.64L21 8l-1.99-1.99c-1.31.98-2.28 2.37-2.73 3.99-.18.64-.28 1.31-.28 2s.1 1.36.28 2c.45 1.61 1.42 3.01 2.73 3.99zM9 12c1.65 0 3-1.35 3-3s-1.35-3-3-3-3 1.35-3 3 1.35 3 3 3zm0-4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm6 8.59c0-2.5-3.97-3.58-6-3.58s-6 1.08-6 3.58V18h12v-1.41zM5.48 16c.74-.5 2.22-1 3.52-1s2.77.49 3.52 1H5.48z\"/></svg> ),\n\tcategory: 'widgets',\n\tsupports: {\n\t\thtml: true,\n\t},\n\n\tattributes: {\n\t\tphone: {\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t},\n\n\tedit: function( props ) {\n\t\treturn (\n\t\t\t<PhoneInput\n\t\t\t\tvalue={ props.attributes.phone }\n\t\t\t\tonChange={ phone => props.setAttributes( { phone } ) }\n\t\t\t/>\n\t\t);\n\t},\n\n\tsave: function( props ) {\n\t\treturn (\n\t\t\t<h3 className='phone-number'>\n\t\t\t\t<a className='phone-number' itemProp='telephone' href={ 'tel:' + props.attributes.phone }>\n\t\t\t\t\t{ formatPhoneNumber( props.attributes.phone, 'National' ) }\n\t\t\t\t</a>\n\t\t\t</h3>\n\t\t);\n\t},\n} );\n"]}